/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var artifact_pb = require('./artifact_pb.js');
goog.object.extend(proto, artifact_pb);
goog.exportSymbol('proto.taxonomy.model.core.Base', null, global);
goog.exportSymbol('proto.taxonomy.model.core.BaseReference', null, global);
goog.exportSymbol('proto.taxonomy.model.core.Bases', null, global);
goog.exportSymbol('proto.taxonomy.model.core.Behavior', null, global);
goog.exportSymbol('proto.taxonomy.model.core.BehaviorGroup', null, global);
goog.exportSymbol('proto.taxonomy.model.core.BehaviorGroupReference', null, global);
goog.exportSymbol('proto.taxonomy.model.core.BehaviorGroupSpecification', null, global);
goog.exportSymbol('proto.taxonomy.model.core.BehaviorGroups', null, global);
goog.exportSymbol('proto.taxonomy.model.core.BehaviorReference', null, global);
goog.exportSymbol('proto.taxonomy.model.core.BehaviorSpecification', null, global);
goog.exportSymbol('proto.taxonomy.model.core.Behaviors', null, global);
goog.exportSymbol('proto.taxonomy.model.core.InfluenceBinding', null, global);
goog.exportSymbol('proto.taxonomy.model.core.InfluenceType', null, global);
goog.exportSymbol('proto.taxonomy.model.core.Invocation', null, global);
goog.exportSymbol('proto.taxonomy.model.core.InvocationBinding', null, global);
goog.exportSymbol('proto.taxonomy.model.core.InvocationBinding.Influence', null, global);
goog.exportSymbol('proto.taxonomy.model.core.InvocationBinding.InvocationStep', null, global);
goog.exportSymbol('proto.taxonomy.model.core.InvocationParameter', null, global);
goog.exportSymbol('proto.taxonomy.model.core.InvocationRequest', null, global);
goog.exportSymbol('proto.taxonomy.model.core.InvocationResponse', null, global);
goog.exportSymbol('proto.taxonomy.model.core.Property', null, global);
goog.exportSymbol('proto.taxonomy.model.core.PropertySet', null, global);
goog.exportSymbol('proto.taxonomy.model.core.PropertySetReference', null, global);
goog.exportSymbol('proto.taxonomy.model.core.PropertySetSpecification', null, global);
goog.exportSymbol('proto.taxonomy.model.core.PropertySets', null, global);
goog.exportSymbol('proto.taxonomy.model.core.PropertySpecification', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TemplateBase', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TemplateBehavior', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TemplateBehaviorGroup', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TemplateDefinition', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TemplateDefinitions', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TemplateFormula', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TemplateFormulas', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TemplatePropertySet', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TokenBase', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TokenBehavior', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TokenBehaviorGroup', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TokenPropertySet', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TokenSpecification', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TokenTemplate', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TokenTemplates', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.Base = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.Base, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.Base.displayName = 'proto.taxonomy.model.core.Base';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.Base.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.Base.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.Base} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Base.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifact: (f = msg.getArtifact()) && artifact_pb.Artifact.toObject(includeInstance, f),
    tokenType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tokenUnit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    representationType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    valueType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    supply: jspb.Message.getFieldWithDefault(msg, 6, 0),
    name: jspb.Message.getFieldWithDefault(msg, 7, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 8, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 9, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 10, 0),
    decimals: jspb.Message.getFieldWithDefault(msg, 11, 0),
    tokenPropertiesMap: (f = msg.getTokenPropertiesMap()) ? f.toObject(includeInstance, undefined) : [],
    constructorName: jspb.Message.getFieldWithDefault(msg, 13, ""),
    constructor: (f = msg.getConstructor()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.Base}
 */
proto.taxonomy.model.core.Base.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.Base;
  return proto.taxonomy.model.core.Base.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.Base} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.Base}
 */
proto.taxonomy.model.core.Base.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.Artifact;
      reader.readMessage(value,artifact_pb.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    case 2:
      var value = /** @type {!proto.taxonomy.model.artifact.TokenType} */ (reader.readEnum());
      msg.setTokenType(value);
      break;
    case 3:
      var value = /** @type {!proto.taxonomy.model.artifact.TokenUnit} */ (reader.readEnum());
      msg.setTokenUnit(value);
      break;
    case 4:
      var value = /** @type {!proto.taxonomy.model.artifact.RepresentationType} */ (reader.readEnum());
      msg.setRepresentationType(value);
      break;
    case 5:
      var value = /** @type {!proto.taxonomy.model.artifact.ValueType} */ (reader.readEnum());
      msg.setValueType(value);
      break;
    case 6:
      var value = /** @type {!proto.taxonomy.model.artifact.Supply} */ (reader.readEnum());
      msg.setSupply(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQuantity(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimals(value);
      break;
    case 12:
      var value = msg.getTokenPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setConstructorName(value);
      break;
    case 14:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setConstructor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.Base.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.Base.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.Base} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Base.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getTokenType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTokenUnit();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRepresentationType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getValueType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getSupply();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getTokenPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getConstructorName();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getConstructor();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.Artifact artifact = 1;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.core.Base.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Artifact, 1));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.core.Base.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.Base.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.Base.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional taxonomy.model.artifact.TokenType token_type = 2;
 * @return {!proto.taxonomy.model.artifact.TokenType}
 */
proto.taxonomy.model.core.Base.prototype.getTokenType = function() {
  return /** @type {!proto.taxonomy.model.artifact.TokenType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.taxonomy.model.artifact.TokenType} value */
proto.taxonomy.model.core.Base.prototype.setTokenType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional taxonomy.model.artifact.TokenUnit token_unit = 3;
 * @return {!proto.taxonomy.model.artifact.TokenUnit}
 */
proto.taxonomy.model.core.Base.prototype.getTokenUnit = function() {
  return /** @type {!proto.taxonomy.model.artifact.TokenUnit} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.taxonomy.model.artifact.TokenUnit} value */
proto.taxonomy.model.core.Base.prototype.setTokenUnit = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional taxonomy.model.artifact.RepresentationType representation_type = 4;
 * @return {!proto.taxonomy.model.artifact.RepresentationType}
 */
proto.taxonomy.model.core.Base.prototype.getRepresentationType = function() {
  return /** @type {!proto.taxonomy.model.artifact.RepresentationType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.taxonomy.model.artifact.RepresentationType} value */
proto.taxonomy.model.core.Base.prototype.setRepresentationType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional taxonomy.model.artifact.ValueType value_type = 5;
 * @return {!proto.taxonomy.model.artifact.ValueType}
 */
proto.taxonomy.model.core.Base.prototype.getValueType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ValueType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.taxonomy.model.artifact.ValueType} value */
proto.taxonomy.model.core.Base.prototype.setValueType = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional taxonomy.model.artifact.Supply supply = 6;
 * @return {!proto.taxonomy.model.artifact.Supply}
 */
proto.taxonomy.model.core.Base.prototype.getSupply = function() {
  return /** @type {!proto.taxonomy.model.artifact.Supply} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.taxonomy.model.artifact.Supply} value */
proto.taxonomy.model.core.Base.prototype.setSupply = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional string name = 7;
 * @return {string}
 */
proto.taxonomy.model.core.Base.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Base.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string symbol = 8;
 * @return {string}
 */
proto.taxonomy.model.core.Base.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Base.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string owner = 9;
 * @return {string}
 */
proto.taxonomy.model.core.Base.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Base.prototype.setOwner = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int64 quantity = 10;
 * @return {number}
 */
proto.taxonomy.model.core.Base.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.taxonomy.model.core.Base.prototype.setQuantity = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 decimals = 11;
 * @return {number}
 */
proto.taxonomy.model.core.Base.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.taxonomy.model.core.Base.prototype.setDecimals = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * map<string, string> token_properties = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.taxonomy.model.core.Base.prototype.getTokenPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


proto.taxonomy.model.core.Base.prototype.clearTokenPropertiesMap = function() {
  this.getTokenPropertiesMap().clear();
};


/**
 * optional string constructor_name = 13;
 * @return {string}
 */
proto.taxonomy.model.core.Base.prototype.getConstructorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Base.prototype.setConstructorName = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional google.protobuf.Any constructor = 14;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.core.Base.prototype.getConstructor = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 14));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.core.Base.prototype.setConstructor = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.taxonomy.model.core.Base.prototype.clearConstructor = function() {
  this.setConstructor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.Base.prototype.hasConstructor = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.Bases = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.Bases.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.Bases, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.Bases.displayName = 'proto.taxonomy.model.core.Bases';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.Bases.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.Bases.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.Bases.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.Bases} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Bases.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseList: jspb.Message.toObjectList(msg.getBaseList(),
    proto.taxonomy.model.core.Base.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.Bases}
 */
proto.taxonomy.model.core.Bases.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.Bases;
  return proto.taxonomy.model.core.Bases.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.Bases} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.Bases}
 */
proto.taxonomy.model.core.Bases.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.core.Base;
      reader.readMessage(value,proto.taxonomy.model.core.Base.deserializeBinaryFromReader);
      msg.addBase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.Bases.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.Bases.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.Bases} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Bases.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.taxonomy.model.core.Base.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Base base = 1;
 * @return {!Array<!proto.taxonomy.model.core.Base>}
 */
proto.taxonomy.model.core.Bases.prototype.getBaseList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Base>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Base, 1));
};


/** @param {!Array<!proto.taxonomy.model.core.Base>} value */
proto.taxonomy.model.core.Bases.prototype.setBaseList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.taxonomy.model.core.Base=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Base}
 */
proto.taxonomy.model.core.Bases.prototype.addBase = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.taxonomy.model.core.Base, opt_index);
};


proto.taxonomy.model.core.Bases.prototype.clearBaseList = function() {
  this.setBaseList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.BaseReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.BaseReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.BaseReference.displayName = 'proto.taxonomy.model.core.BaseReference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.BaseReference.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.BaseReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.BaseReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BaseReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    reference: (f = msg.getReference()) && artifact_pb.ArtifactReference.toObject(includeInstance, f),
    valueType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    supply: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 5, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 6, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 7, 0),
    decimals: jspb.Message.getFieldWithDefault(msg, 8, 0),
    tokenPropertiesMap: (f = msg.getTokenPropertiesMap()) ? f.toObject(includeInstance, undefined) : [],
    constructorName: jspb.Message.getFieldWithDefault(msg, 10, ""),
    constructor: (f = msg.getConstructor()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.BaseReference}
 */
proto.taxonomy.model.core.BaseReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.BaseReference;
  return proto.taxonomy.model.core.BaseReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.BaseReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.BaseReference}
 */
proto.taxonomy.model.core.BaseReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.ArtifactReference;
      reader.readMessage(value,artifact_pb.ArtifactReference.deserializeBinaryFromReader);
      msg.setReference(value);
      break;
    case 2:
      var value = /** @type {!proto.taxonomy.model.artifact.ValueType} */ (reader.readEnum());
      msg.setValueType(value);
      break;
    case 3:
      var value = /** @type {!proto.taxonomy.model.artifact.Supply} */ (reader.readEnum());
      msg.setSupply(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQuantity(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimals(value);
      break;
    case 9:
      var value = msg.getTokenPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setConstructorName(value);
      break;
    case 11:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setConstructor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.BaseReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.BaseReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.BaseReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BaseReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReference();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.ArtifactReference.serializeBinaryToWriter
    );
  }
  f = message.getValueType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSupply();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getTokenPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getConstructorName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getConstructor();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.ArtifactReference reference = 1;
 * @return {?proto.taxonomy.model.artifact.ArtifactReference}
 */
proto.taxonomy.model.core.BaseReference.prototype.getReference = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactReference} */ (
    jspb.Message.getWrapperField(this, artifact_pb.ArtifactReference, 1));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactReference|undefined} value */
proto.taxonomy.model.core.BaseReference.prototype.setReference = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.BaseReference.prototype.clearReference = function() {
  this.setReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.BaseReference.prototype.hasReference = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional taxonomy.model.artifact.ValueType value_type = 2;
 * @return {!proto.taxonomy.model.artifact.ValueType}
 */
proto.taxonomy.model.core.BaseReference.prototype.getValueType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ValueType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.taxonomy.model.artifact.ValueType} value */
proto.taxonomy.model.core.BaseReference.prototype.setValueType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional taxonomy.model.artifact.Supply supply = 3;
 * @return {!proto.taxonomy.model.artifact.Supply}
 */
proto.taxonomy.model.core.BaseReference.prototype.getSupply = function() {
  return /** @type {!proto.taxonomy.model.artifact.Supply} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.taxonomy.model.artifact.Supply} value */
proto.taxonomy.model.core.BaseReference.prototype.setSupply = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.taxonomy.model.core.BaseReference.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.BaseReference.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string symbol = 5;
 * @return {string}
 */
proto.taxonomy.model.core.BaseReference.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.BaseReference.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string owner = 6;
 * @return {string}
 */
proto.taxonomy.model.core.BaseReference.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.BaseReference.prototype.setOwner = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 quantity = 7;
 * @return {number}
 */
proto.taxonomy.model.core.BaseReference.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.taxonomy.model.core.BaseReference.prototype.setQuantity = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 decimals = 8;
 * @return {number}
 */
proto.taxonomy.model.core.BaseReference.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.taxonomy.model.core.BaseReference.prototype.setDecimals = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * map<string, string> token_properties = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.taxonomy.model.core.BaseReference.prototype.getTokenPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


proto.taxonomy.model.core.BaseReference.prototype.clearTokenPropertiesMap = function() {
  this.getTokenPropertiesMap().clear();
};


/**
 * optional string constructor_name = 10;
 * @return {string}
 */
proto.taxonomy.model.core.BaseReference.prototype.getConstructorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.BaseReference.prototype.setConstructorName = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional google.protobuf.Any constructor = 11;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.core.BaseReference.prototype.getConstructor = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 11));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.core.BaseReference.prototype.setConstructor = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.taxonomy.model.core.BaseReference.prototype.clearConstructor = function() {
  this.setConstructor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.BaseReference.prototype.hasConstructor = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.Behavior = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.Behavior.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.Behavior, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.Behavior.displayName = 'proto.taxonomy.model.core.Behavior';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.Behavior.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.Behavior.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.Behavior.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.Behavior} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Behavior.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifact: (f = msg.getArtifact()) && artifact_pb.Artifact.toObject(includeInstance, f),
    isExternal: jspb.Message.getFieldWithDefault(msg, 2, false),
    constructorType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    constructor: (f = msg.getConstructor()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    invocationsList: jspb.Message.toObjectList(msg.getInvocationsList(),
    proto.taxonomy.model.core.Invocation.toObject, includeInstance),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.taxonomy.model.core.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.Behavior}
 */
proto.taxonomy.model.core.Behavior.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.Behavior;
  return proto.taxonomy.model.core.Behavior.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.Behavior} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.Behavior}
 */
proto.taxonomy.model.core.Behavior.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.Artifact;
      reader.readMessage(value,artifact_pb.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsExternal(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConstructorType(value);
      break;
    case 4:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setConstructor(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.core.Invocation;
      reader.readMessage(value,proto.taxonomy.model.core.Invocation.deserializeBinaryFromReader);
      msg.addInvocations(value);
      break;
    case 6:
      var value = new proto.taxonomy.model.core.Property;
      reader.readMessage(value,proto.taxonomy.model.core.Property.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.Behavior.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.Behavior.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.Behavior} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Behavior.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getIsExternal();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getConstructorType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConstructor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getInvocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.taxonomy.model.core.Invocation.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.taxonomy.model.core.Property.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.Artifact artifact = 1;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.core.Behavior.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Artifact, 1));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.core.Behavior.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.Behavior.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.Behavior.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_external = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.taxonomy.model.core.Behavior.prototype.getIsExternal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.taxonomy.model.core.Behavior.prototype.setIsExternal = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string constructor_type = 3;
 * @return {string}
 */
proto.taxonomy.model.core.Behavior.prototype.getConstructorType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Behavior.prototype.setConstructorType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Any constructor = 4;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.core.Behavior.prototype.getConstructor = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 4));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.core.Behavior.prototype.setConstructor = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.taxonomy.model.core.Behavior.prototype.clearConstructor = function() {
  this.setConstructor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.Behavior.prototype.hasConstructor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Invocation invocations = 5;
 * @return {!Array<!proto.taxonomy.model.core.Invocation>}
 */
proto.taxonomy.model.core.Behavior.prototype.getInvocationsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Invocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Invocation, 5));
};


/** @param {!Array<!proto.taxonomy.model.core.Invocation>} value */
proto.taxonomy.model.core.Behavior.prototype.setInvocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.taxonomy.model.core.Invocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Invocation}
 */
proto.taxonomy.model.core.Behavior.prototype.addInvocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.taxonomy.model.core.Invocation, opt_index);
};


proto.taxonomy.model.core.Behavior.prototype.clearInvocationsList = function() {
  this.setInvocationsList([]);
};


/**
 * repeated Property properties = 6;
 * @return {!Array<!proto.taxonomy.model.core.Property>}
 */
proto.taxonomy.model.core.Behavior.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Property, 6));
};


/** @param {!Array<!proto.taxonomy.model.core.Property>} value */
proto.taxonomy.model.core.Behavior.prototype.setPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.taxonomy.model.core.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Property}
 */
proto.taxonomy.model.core.Behavior.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.taxonomy.model.core.Property, opt_index);
};


proto.taxonomy.model.core.Behavior.prototype.clearPropertiesList = function() {
  this.setPropertiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.Behaviors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.Behaviors.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.Behaviors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.Behaviors.displayName = 'proto.taxonomy.model.core.Behaviors';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.Behaviors.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.Behaviors.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.Behaviors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.Behaviors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Behaviors.toObject = function(includeInstance, msg) {
  var f, obj = {
    behaviorList: jspb.Message.toObjectList(msg.getBehaviorList(),
    proto.taxonomy.model.core.Behavior.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.Behaviors}
 */
proto.taxonomy.model.core.Behaviors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.Behaviors;
  return proto.taxonomy.model.core.Behaviors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.Behaviors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.Behaviors}
 */
proto.taxonomy.model.core.Behaviors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.core.Behavior;
      reader.readMessage(value,proto.taxonomy.model.core.Behavior.deserializeBinaryFromReader);
      msg.addBehavior(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.Behaviors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.Behaviors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.Behaviors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Behaviors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBehaviorList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.taxonomy.model.core.Behavior.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Behavior behavior = 1;
 * @return {!Array<!proto.taxonomy.model.core.Behavior>}
 */
proto.taxonomy.model.core.Behaviors.prototype.getBehaviorList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Behavior>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Behavior, 1));
};


/** @param {!Array<!proto.taxonomy.model.core.Behavior>} value */
proto.taxonomy.model.core.Behaviors.prototype.setBehaviorList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.taxonomy.model.core.Behavior=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Behavior}
 */
proto.taxonomy.model.core.Behaviors.prototype.addBehavior = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.taxonomy.model.core.Behavior, opt_index);
};


proto.taxonomy.model.core.Behaviors.prototype.clearBehaviorList = function() {
  this.setBehaviorList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.BehaviorReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.BehaviorReference.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.BehaviorReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.BehaviorReference.displayName = 'proto.taxonomy.model.core.BehaviorReference';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.BehaviorReference.repeatedFields_ = [5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.BehaviorReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.BehaviorReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BehaviorReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    reference: (f = msg.getReference()) && artifact_pb.ArtifactReference.toObject(includeInstance, f),
    isExternal: jspb.Message.getFieldWithDefault(msg, 2, false),
    constructorType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    constructor: (f = msg.getConstructor()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    appliesToList: jspb.Message.toObjectList(msg.getAppliesToList(),
    artifact_pb.ArtifactSymbol.toObject, includeInstance),
    invocationsList: jspb.Message.toObjectList(msg.getInvocationsList(),
    proto.taxonomy.model.core.Invocation.toObject, includeInstance),
    influenceBindingsList: jspb.Message.toObjectList(msg.getInfluenceBindingsList(),
    proto.taxonomy.model.core.InfluenceBinding.toObject, includeInstance),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.taxonomy.model.core.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.BehaviorReference}
 */
proto.taxonomy.model.core.BehaviorReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.BehaviorReference;
  return proto.taxonomy.model.core.BehaviorReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.BehaviorReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.BehaviorReference}
 */
proto.taxonomy.model.core.BehaviorReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.ArtifactReference;
      reader.readMessage(value,artifact_pb.ArtifactReference.deserializeBinaryFromReader);
      msg.setReference(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsExternal(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConstructorType(value);
      break;
    case 4:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setConstructor(value);
      break;
    case 5:
      var value = new artifact_pb.ArtifactSymbol;
      reader.readMessage(value,artifact_pb.ArtifactSymbol.deserializeBinaryFromReader);
      msg.addAppliesTo(value);
      break;
    case 6:
      var value = new proto.taxonomy.model.core.Invocation;
      reader.readMessage(value,proto.taxonomy.model.core.Invocation.deserializeBinaryFromReader);
      msg.addInvocations(value);
      break;
    case 7:
      var value = new proto.taxonomy.model.core.InfluenceBinding;
      reader.readMessage(value,proto.taxonomy.model.core.InfluenceBinding.deserializeBinaryFromReader);
      msg.addInfluenceBindings(value);
      break;
    case 8:
      var value = new proto.taxonomy.model.core.Property;
      reader.readMessage(value,proto.taxonomy.model.core.Property.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.BehaviorReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.BehaviorReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BehaviorReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReference();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.ArtifactReference.serializeBinaryToWriter
    );
  }
  f = message.getIsExternal();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getConstructorType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConstructor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getAppliesToList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      artifact_pb.ArtifactSymbol.serializeBinaryToWriter
    );
  }
  f = message.getInvocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.taxonomy.model.core.Invocation.serializeBinaryToWriter
    );
  }
  f = message.getInfluenceBindingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.taxonomy.model.core.InfluenceBinding.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.taxonomy.model.core.Property.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.ArtifactReference reference = 1;
 * @return {?proto.taxonomy.model.artifact.ArtifactReference}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.getReference = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactReference} */ (
    jspb.Message.getWrapperField(this, artifact_pb.ArtifactReference, 1));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactReference|undefined} value */
proto.taxonomy.model.core.BehaviorReference.prototype.setReference = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.BehaviorReference.prototype.clearReference = function() {
  this.setReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.hasReference = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_external = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.getIsExternal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.taxonomy.model.core.BehaviorReference.prototype.setIsExternal = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string constructor_type = 3;
 * @return {string}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.getConstructorType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.BehaviorReference.prototype.setConstructorType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Any constructor = 4;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.getConstructor = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 4));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.core.BehaviorReference.prototype.setConstructor = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.taxonomy.model.core.BehaviorReference.prototype.clearConstructor = function() {
  this.setConstructor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.hasConstructor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated taxonomy.model.artifact.ArtifactSymbol applies_to = 5;
 * @return {!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.getAppliesToList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>} */ (
    jspb.Message.getRepeatedWrapperField(this, artifact_pb.ArtifactSymbol, 5));
};


/** @param {!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>} value */
proto.taxonomy.model.core.BehaviorReference.prototype.setAppliesToList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.ArtifactSymbol=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.addAppliesTo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.taxonomy.model.artifact.ArtifactSymbol, opt_index);
};


proto.taxonomy.model.core.BehaviorReference.prototype.clearAppliesToList = function() {
  this.setAppliesToList([]);
};


/**
 * repeated Invocation invocations = 6;
 * @return {!Array<!proto.taxonomy.model.core.Invocation>}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.getInvocationsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Invocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Invocation, 6));
};


/** @param {!Array<!proto.taxonomy.model.core.Invocation>} value */
proto.taxonomy.model.core.BehaviorReference.prototype.setInvocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.taxonomy.model.core.Invocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Invocation}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.addInvocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.taxonomy.model.core.Invocation, opt_index);
};


proto.taxonomy.model.core.BehaviorReference.prototype.clearInvocationsList = function() {
  this.setInvocationsList([]);
};


/**
 * repeated InfluenceBinding influence_bindings = 7;
 * @return {!Array<!proto.taxonomy.model.core.InfluenceBinding>}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.getInfluenceBindingsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.InfluenceBinding>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.InfluenceBinding, 7));
};


/** @param {!Array<!proto.taxonomy.model.core.InfluenceBinding>} value */
proto.taxonomy.model.core.BehaviorReference.prototype.setInfluenceBindingsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.taxonomy.model.core.InfluenceBinding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.InfluenceBinding}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.addInfluenceBindings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.taxonomy.model.core.InfluenceBinding, opt_index);
};


proto.taxonomy.model.core.BehaviorReference.prototype.clearInfluenceBindingsList = function() {
  this.setInfluenceBindingsList([]);
};


/**
 * repeated Property properties = 8;
 * @return {!Array<!proto.taxonomy.model.core.Property>}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Property, 8));
};


/** @param {!Array<!proto.taxonomy.model.core.Property>} value */
proto.taxonomy.model.core.BehaviorReference.prototype.setPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.taxonomy.model.core.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Property}
 */
proto.taxonomy.model.core.BehaviorReference.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.taxonomy.model.core.Property, opt_index);
};


proto.taxonomy.model.core.BehaviorReference.prototype.clearPropertiesList = function() {
  this.setPropertiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.BehaviorGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.BehaviorGroup.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.BehaviorGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.BehaviorGroup.displayName = 'proto.taxonomy.model.core.BehaviorGroup';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.BehaviorGroup.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.BehaviorGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.BehaviorGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BehaviorGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifact: (f = msg.getArtifact()) && artifact_pb.Artifact.toObject(includeInstance, f),
    behaviorsList: jspb.Message.toObjectList(msg.getBehaviorsList(),
    proto.taxonomy.model.core.BehaviorReference.toObject, includeInstance),
    behaviorArtifactsMap: (f = msg.getBehaviorArtifactsMap()) ? f.toObject(includeInstance, proto.taxonomy.model.core.Behavior.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.BehaviorGroup}
 */
proto.taxonomy.model.core.BehaviorGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.BehaviorGroup;
  return proto.taxonomy.model.core.BehaviorGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.BehaviorGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.BehaviorGroup}
 */
proto.taxonomy.model.core.BehaviorGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.Artifact;
      reader.readMessage(value,artifact_pb.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.core.BehaviorReference;
      reader.readMessage(value,proto.taxonomy.model.core.BehaviorReference.deserializeBinaryFromReader);
      msg.addBehaviors(value);
      break;
    case 3:
      var value = msg.getBehaviorArtifactsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.taxonomy.model.core.Behavior.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.BehaviorGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.BehaviorGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BehaviorGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getBehaviorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.taxonomy.model.core.BehaviorReference.serializeBinaryToWriter
    );
  }
  f = message.getBehaviorArtifactsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.taxonomy.model.core.Behavior.serializeBinaryToWriter);
  }
};


/**
 * optional taxonomy.model.artifact.Artifact artifact = 1;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Artifact, 1));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.core.BehaviorGroup.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.BehaviorGroup.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated BehaviorReference behaviors = 2;
 * @return {!Array<!proto.taxonomy.model.core.BehaviorReference>}
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.getBehaviorsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.BehaviorReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.BehaviorReference, 2));
};


/** @param {!Array<!proto.taxonomy.model.core.BehaviorReference>} value */
proto.taxonomy.model.core.BehaviorGroup.prototype.setBehaviorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.taxonomy.model.core.BehaviorReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.BehaviorReference}
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.addBehaviors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.taxonomy.model.core.BehaviorReference, opt_index);
};


proto.taxonomy.model.core.BehaviorGroup.prototype.clearBehaviorsList = function() {
  this.setBehaviorsList([]);
};


/**
 * map<string, Behavior> behavior_artifacts = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.taxonomy.model.core.Behavior>}
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.getBehaviorArtifactsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.taxonomy.model.core.Behavior>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.taxonomy.model.core.Behavior));
};


proto.taxonomy.model.core.BehaviorGroup.prototype.clearBehaviorArtifactsMap = function() {
  this.getBehaviorArtifactsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.BehaviorGroups = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.BehaviorGroups.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.BehaviorGroups, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.BehaviorGroups.displayName = 'proto.taxonomy.model.core.BehaviorGroups';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.BehaviorGroups.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.BehaviorGroups.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.BehaviorGroups.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.BehaviorGroups} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BehaviorGroups.toObject = function(includeInstance, msg) {
  var f, obj = {
    behaviorGroupList: jspb.Message.toObjectList(msg.getBehaviorGroupList(),
    proto.taxonomy.model.core.BehaviorGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.BehaviorGroups}
 */
proto.taxonomy.model.core.BehaviorGroups.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.BehaviorGroups;
  return proto.taxonomy.model.core.BehaviorGroups.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.BehaviorGroups} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.BehaviorGroups}
 */
proto.taxonomy.model.core.BehaviorGroups.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.core.BehaviorGroup;
      reader.readMessage(value,proto.taxonomy.model.core.BehaviorGroup.deserializeBinaryFromReader);
      msg.addBehaviorGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.BehaviorGroups.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.BehaviorGroups.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.BehaviorGroups} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BehaviorGroups.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBehaviorGroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.taxonomy.model.core.BehaviorGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BehaviorGroup behavior_group = 1;
 * @return {!Array<!proto.taxonomy.model.core.BehaviorGroup>}
 */
proto.taxonomy.model.core.BehaviorGroups.prototype.getBehaviorGroupList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.BehaviorGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.BehaviorGroup, 1));
};


/** @param {!Array<!proto.taxonomy.model.core.BehaviorGroup>} value */
proto.taxonomy.model.core.BehaviorGroups.prototype.setBehaviorGroupList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.taxonomy.model.core.BehaviorGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.BehaviorGroup}
 */
proto.taxonomy.model.core.BehaviorGroups.prototype.addBehaviorGroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.taxonomy.model.core.BehaviorGroup, opt_index);
};


proto.taxonomy.model.core.BehaviorGroups.prototype.clearBehaviorGroupList = function() {
  this.setBehaviorGroupList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.BehaviorGroupReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.BehaviorGroupReference.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.BehaviorGroupReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.BehaviorGroupReference.displayName = 'proto.taxonomy.model.core.BehaviorGroupReference';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.BehaviorGroupReference.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.BehaviorGroupReference.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.BehaviorGroupReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.BehaviorGroupReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BehaviorGroupReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    reference: (f = msg.getReference()) && artifact_pb.ArtifactReference.toObject(includeInstance, f),
    behaviorArtifactsList: jspb.Message.toObjectList(msg.getBehaviorArtifactsList(),
    proto.taxonomy.model.core.BehaviorReference.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.BehaviorGroupReference}
 */
proto.taxonomy.model.core.BehaviorGroupReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.BehaviorGroupReference;
  return proto.taxonomy.model.core.BehaviorGroupReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.BehaviorGroupReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.BehaviorGroupReference}
 */
proto.taxonomy.model.core.BehaviorGroupReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.ArtifactReference;
      reader.readMessage(value,artifact_pb.ArtifactReference.deserializeBinaryFromReader);
      msg.setReference(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.core.BehaviorReference;
      reader.readMessage(value,proto.taxonomy.model.core.BehaviorReference.deserializeBinaryFromReader);
      msg.addBehaviorArtifacts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.BehaviorGroupReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.BehaviorGroupReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.BehaviorGroupReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BehaviorGroupReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReference();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.ArtifactReference.serializeBinaryToWriter
    );
  }
  f = message.getBehaviorArtifactsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.taxonomy.model.core.BehaviorReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.ArtifactReference reference = 1;
 * @return {?proto.taxonomy.model.artifact.ArtifactReference}
 */
proto.taxonomy.model.core.BehaviorGroupReference.prototype.getReference = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactReference} */ (
    jspb.Message.getWrapperField(this, artifact_pb.ArtifactReference, 1));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactReference|undefined} value */
proto.taxonomy.model.core.BehaviorGroupReference.prototype.setReference = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.BehaviorGroupReference.prototype.clearReference = function() {
  this.setReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.BehaviorGroupReference.prototype.hasReference = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated BehaviorReference behavior_artifacts = 2;
 * @return {!Array<!proto.taxonomy.model.core.BehaviorReference>}
 */
proto.taxonomy.model.core.BehaviorGroupReference.prototype.getBehaviorArtifactsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.BehaviorReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.BehaviorReference, 2));
};


/** @param {!Array<!proto.taxonomy.model.core.BehaviorReference>} value */
proto.taxonomy.model.core.BehaviorGroupReference.prototype.setBehaviorArtifactsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.taxonomy.model.core.BehaviorReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.BehaviorReference}
 */
proto.taxonomy.model.core.BehaviorGroupReference.prototype.addBehaviorArtifacts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.taxonomy.model.core.BehaviorReference, opt_index);
};


proto.taxonomy.model.core.BehaviorGroupReference.prototype.clearBehaviorArtifactsList = function() {
  this.setBehaviorArtifactsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.PropertySet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.PropertySet.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.PropertySet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.PropertySet.displayName = 'proto.taxonomy.model.core.PropertySet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.PropertySet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.PropertySet.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.PropertySet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.PropertySet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.PropertySet.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifact: (f = msg.getArtifact()) && artifact_pb.Artifact.toObject(includeInstance, f),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.taxonomy.model.core.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.PropertySet}
 */
proto.taxonomy.model.core.PropertySet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.PropertySet;
  return proto.taxonomy.model.core.PropertySet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.PropertySet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.PropertySet}
 */
proto.taxonomy.model.core.PropertySet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.Artifact;
      reader.readMessage(value,artifact_pb.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.core.Property;
      reader.readMessage(value,proto.taxonomy.model.core.Property.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.PropertySet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.PropertySet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.PropertySet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.PropertySet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.taxonomy.model.core.Property.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.Artifact artifact = 1;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.core.PropertySet.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Artifact, 1));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.core.PropertySet.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.PropertySet.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.PropertySet.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Property properties = 2;
 * @return {!Array<!proto.taxonomy.model.core.Property>}
 */
proto.taxonomy.model.core.PropertySet.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Property, 2));
};


/** @param {!Array<!proto.taxonomy.model.core.Property>} value */
proto.taxonomy.model.core.PropertySet.prototype.setPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.taxonomy.model.core.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Property}
 */
proto.taxonomy.model.core.PropertySet.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.taxonomy.model.core.Property, opt_index);
};


proto.taxonomy.model.core.PropertySet.prototype.clearPropertiesList = function() {
  this.setPropertiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.PropertySets = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.PropertySets.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.PropertySets, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.PropertySets.displayName = 'proto.taxonomy.model.core.PropertySets';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.PropertySets.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.PropertySets.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.PropertySets.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.PropertySets} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.PropertySets.toObject = function(includeInstance, msg) {
  var f, obj = {
    propertySetList: jspb.Message.toObjectList(msg.getPropertySetList(),
    proto.taxonomy.model.core.PropertySet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.PropertySets}
 */
proto.taxonomy.model.core.PropertySets.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.PropertySets;
  return proto.taxonomy.model.core.PropertySets.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.PropertySets} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.PropertySets}
 */
proto.taxonomy.model.core.PropertySets.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.core.PropertySet;
      reader.readMessage(value,proto.taxonomy.model.core.PropertySet.deserializeBinaryFromReader);
      msg.addPropertySet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.PropertySets.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.PropertySets.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.PropertySets} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.PropertySets.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropertySetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.taxonomy.model.core.PropertySet.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PropertySet property_set = 1;
 * @return {!Array<!proto.taxonomy.model.core.PropertySet>}
 */
proto.taxonomy.model.core.PropertySets.prototype.getPropertySetList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.PropertySet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.PropertySet, 1));
};


/** @param {!Array<!proto.taxonomy.model.core.PropertySet>} value */
proto.taxonomy.model.core.PropertySets.prototype.setPropertySetList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.taxonomy.model.core.PropertySet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.PropertySet}
 */
proto.taxonomy.model.core.PropertySets.prototype.addPropertySet = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.taxonomy.model.core.PropertySet, opt_index);
};


proto.taxonomy.model.core.PropertySets.prototype.clearPropertySetList = function() {
  this.setPropertySetList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.PropertySetReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.PropertySetReference.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.PropertySetReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.PropertySetReference.displayName = 'proto.taxonomy.model.core.PropertySetReference';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.PropertySetReference.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.PropertySetReference.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.PropertySetReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.PropertySetReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.PropertySetReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    reference: (f = msg.getReference()) && artifact_pb.ArtifactReference.toObject(includeInstance, f),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.taxonomy.model.core.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.PropertySetReference}
 */
proto.taxonomy.model.core.PropertySetReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.PropertySetReference;
  return proto.taxonomy.model.core.PropertySetReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.PropertySetReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.PropertySetReference}
 */
proto.taxonomy.model.core.PropertySetReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.ArtifactReference;
      reader.readMessage(value,artifact_pb.ArtifactReference.deserializeBinaryFromReader);
      msg.setReference(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.core.Property;
      reader.readMessage(value,proto.taxonomy.model.core.Property.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.PropertySetReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.PropertySetReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.PropertySetReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.PropertySetReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReference();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.ArtifactReference.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.taxonomy.model.core.Property.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.ArtifactReference reference = 1;
 * @return {?proto.taxonomy.model.artifact.ArtifactReference}
 */
proto.taxonomy.model.core.PropertySetReference.prototype.getReference = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactReference} */ (
    jspb.Message.getWrapperField(this, artifact_pb.ArtifactReference, 1));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactReference|undefined} value */
proto.taxonomy.model.core.PropertySetReference.prototype.setReference = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.PropertySetReference.prototype.clearReference = function() {
  this.setReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.PropertySetReference.prototype.hasReference = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Property properties = 2;
 * @return {!Array<!proto.taxonomy.model.core.Property>}
 */
proto.taxonomy.model.core.PropertySetReference.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Property, 2));
};


/** @param {!Array<!proto.taxonomy.model.core.Property>} value */
proto.taxonomy.model.core.PropertySetReference.prototype.setPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.taxonomy.model.core.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Property}
 */
proto.taxonomy.model.core.PropertySetReference.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.taxonomy.model.core.Property, opt_index);
};


proto.taxonomy.model.core.PropertySetReference.prototype.clearPropertiesList = function() {
  this.setPropertiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.Property = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.Property.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.Property, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.Property.displayName = 'proto.taxonomy.model.core.Property';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.Property.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.Property.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.Property.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.Property} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Property.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valueDescription: jspb.Message.getFieldWithDefault(msg, 2, ""),
    templateValue: jspb.Message.getFieldWithDefault(msg, 3, ""),
    propertyInvocationsList: jspb.Message.toObjectList(msg.getPropertyInvocationsList(),
    proto.taxonomy.model.core.Invocation.toObject, includeInstance),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.taxonomy.model.core.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.Property}
 */
proto.taxonomy.model.core.Property.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.Property;
  return proto.taxonomy.model.core.Property.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.Property} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.Property}
 */
proto.taxonomy.model.core.Property.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValueDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemplateValue(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.core.Invocation;
      reader.readMessage(value,proto.taxonomy.model.core.Invocation.deserializeBinaryFromReader);
      msg.addPropertyInvocations(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.core.Property;
      reader.readMessage(value,proto.taxonomy.model.core.Property.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.Property.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.Property.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.Property} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Property.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValueDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTemplateValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPropertyInvocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.taxonomy.model.core.Invocation.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.taxonomy.model.core.Property.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.taxonomy.model.core.Property.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Property.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value_description = 2;
 * @return {string}
 */
proto.taxonomy.model.core.Property.prototype.getValueDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Property.prototype.setValueDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string template_value = 3;
 * @return {string}
 */
proto.taxonomy.model.core.Property.prototype.getTemplateValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Property.prototype.setTemplateValue = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Invocation property_invocations = 4;
 * @return {!Array<!proto.taxonomy.model.core.Invocation>}
 */
proto.taxonomy.model.core.Property.prototype.getPropertyInvocationsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Invocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Invocation, 4));
};


/** @param {!Array<!proto.taxonomy.model.core.Invocation>} value */
proto.taxonomy.model.core.Property.prototype.setPropertyInvocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.taxonomy.model.core.Invocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Invocation}
 */
proto.taxonomy.model.core.Property.prototype.addPropertyInvocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.taxonomy.model.core.Invocation, opt_index);
};


proto.taxonomy.model.core.Property.prototype.clearPropertyInvocationsList = function() {
  this.setPropertyInvocationsList([]);
};


/**
 * repeated Property properties = 5;
 * @return {!Array<!proto.taxonomy.model.core.Property>}
 */
proto.taxonomy.model.core.Property.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Property, 5));
};


/** @param {!Array<!proto.taxonomy.model.core.Property>} value */
proto.taxonomy.model.core.Property.prototype.setPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.taxonomy.model.core.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Property}
 */
proto.taxonomy.model.core.Property.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.taxonomy.model.core.Property, opt_index);
};


proto.taxonomy.model.core.Property.prototype.clearPropertiesList = function() {
  this.setPropertiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.Invocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.Invocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.Invocation.displayName = 'proto.taxonomy.model.core.Invocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.Invocation.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.Invocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.Invocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Invocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    request: (f = msg.getRequest()) && proto.taxonomy.model.core.InvocationRequest.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.taxonomy.model.core.InvocationResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.Invocation}
 */
proto.taxonomy.model.core.Invocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.Invocation;
  return proto.taxonomy.model.core.Invocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.Invocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.Invocation}
 */
proto.taxonomy.model.core.Invocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.core.InvocationRequest;
      reader.readMessage(value,proto.taxonomy.model.core.InvocationRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.core.InvocationResponse;
      reader.readMessage(value,proto.taxonomy.model.core.InvocationResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.Invocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.Invocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.Invocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Invocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.taxonomy.model.core.InvocationRequest.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.taxonomy.model.core.InvocationResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.taxonomy.model.core.Invocation.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Invocation.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.taxonomy.model.core.Invocation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Invocation.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.taxonomy.model.core.Invocation.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Invocation.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional InvocationRequest request = 4;
 * @return {?proto.taxonomy.model.core.InvocationRequest}
 */
proto.taxonomy.model.core.Invocation.prototype.getRequest = function() {
  return /** @type{?proto.taxonomy.model.core.InvocationRequest} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.InvocationRequest, 4));
};


/** @param {?proto.taxonomy.model.core.InvocationRequest|undefined} value */
proto.taxonomy.model.core.Invocation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.taxonomy.model.core.Invocation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.Invocation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional InvocationResponse response = 5;
 * @return {?proto.taxonomy.model.core.InvocationResponse}
 */
proto.taxonomy.model.core.Invocation.prototype.getResponse = function() {
  return /** @type{?proto.taxonomy.model.core.InvocationResponse} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.InvocationResponse, 5));
};


/** @param {?proto.taxonomy.model.core.InvocationResponse|undefined} value */
proto.taxonomy.model.core.Invocation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.taxonomy.model.core.Invocation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.Invocation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.InvocationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.InvocationRequest.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.InvocationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.InvocationRequest.displayName = 'proto.taxonomy.model.core.InvocationRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.InvocationRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.InvocationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.InvocationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.InvocationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    controlMessageName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    inputParametersList: jspb.Message.toObjectList(msg.getInputParametersList(),
    proto.taxonomy.model.core.InvocationParameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.InvocationRequest}
 */
proto.taxonomy.model.core.InvocationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.InvocationRequest;
  return proto.taxonomy.model.core.InvocationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.InvocationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.InvocationRequest}
 */
proto.taxonomy.model.core.InvocationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setControlMessageName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.core.InvocationParameter;
      reader.readMessage(value,proto.taxonomy.model.core.InvocationParameter.deserializeBinaryFromReader);
      msg.addInputParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.InvocationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.InvocationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.InvocationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControlMessageName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInputParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.taxonomy.model.core.InvocationParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string control_message_name = 1;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationRequest.prototype.getControlMessageName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationRequest.prototype.setControlMessageName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationRequest.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated InvocationParameter input_parameters = 3;
 * @return {!Array<!proto.taxonomy.model.core.InvocationParameter>}
 */
proto.taxonomy.model.core.InvocationRequest.prototype.getInputParametersList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.InvocationParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.InvocationParameter, 3));
};


/** @param {!Array<!proto.taxonomy.model.core.InvocationParameter>} value */
proto.taxonomy.model.core.InvocationRequest.prototype.setInputParametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.taxonomy.model.core.InvocationParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.InvocationParameter}
 */
proto.taxonomy.model.core.InvocationRequest.prototype.addInputParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.taxonomy.model.core.InvocationParameter, opt_index);
};


proto.taxonomy.model.core.InvocationRequest.prototype.clearInputParametersList = function() {
  this.setInputParametersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.InvocationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.InvocationResponse.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.InvocationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.InvocationResponse.displayName = 'proto.taxonomy.model.core.InvocationResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.InvocationResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.InvocationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.InvocationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.InvocationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    controlMessageName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    outputParametersList: jspb.Message.toObjectList(msg.getOutputParametersList(),
    proto.taxonomy.model.core.InvocationParameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.InvocationResponse}
 */
proto.taxonomy.model.core.InvocationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.InvocationResponse;
  return proto.taxonomy.model.core.InvocationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.InvocationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.InvocationResponse}
 */
proto.taxonomy.model.core.InvocationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setControlMessageName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.core.InvocationParameter;
      reader.readMessage(value,proto.taxonomy.model.core.InvocationParameter.deserializeBinaryFromReader);
      msg.addOutputParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.InvocationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.InvocationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.InvocationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControlMessageName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOutputParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.taxonomy.model.core.InvocationParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string control_message_name = 1;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationResponse.prototype.getControlMessageName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationResponse.prototype.setControlMessageName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationResponse.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationResponse.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated InvocationParameter output_parameters = 3;
 * @return {!Array<!proto.taxonomy.model.core.InvocationParameter>}
 */
proto.taxonomy.model.core.InvocationResponse.prototype.getOutputParametersList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.InvocationParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.InvocationParameter, 3));
};


/** @param {!Array<!proto.taxonomy.model.core.InvocationParameter>} value */
proto.taxonomy.model.core.InvocationResponse.prototype.setOutputParametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.taxonomy.model.core.InvocationParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.InvocationParameter}
 */
proto.taxonomy.model.core.InvocationResponse.prototype.addOutputParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.taxonomy.model.core.InvocationParameter, opt_index);
};


proto.taxonomy.model.core.InvocationResponse.prototype.clearOutputParametersList = function() {
  this.setOutputParametersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.InvocationParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.InvocationParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.InvocationParameter.displayName = 'proto.taxonomy.model.core.InvocationParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.InvocationParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.InvocationParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.InvocationParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valueDescription: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.InvocationParameter}
 */
proto.taxonomy.model.core.InvocationParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.InvocationParameter;
  return proto.taxonomy.model.core.InvocationParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.InvocationParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.InvocationParameter}
 */
proto.taxonomy.model.core.InvocationParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValueDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.InvocationParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.InvocationParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.InvocationParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValueDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationParameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationParameter.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value_description = 2;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationParameter.prototype.getValueDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationParameter.prototype.setValueDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TokenTemplate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.TokenTemplate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.TokenTemplate.displayName = 'proto.taxonomy.model.core.TokenTemplate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TokenTemplate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TokenTemplate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenTemplate.toObject = function(includeInstance, msg) {
  var f, obj = {
    formula: (f = msg.getFormula()) && proto.taxonomy.model.core.TemplateFormula.toObject(includeInstance, f),
    definition: (f = msg.getDefinition()) && proto.taxonomy.model.core.TemplateDefinition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TokenTemplate}
 */
proto.taxonomy.model.core.TokenTemplate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TokenTemplate;
  return proto.taxonomy.model.core.TokenTemplate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TokenTemplate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TokenTemplate}
 */
proto.taxonomy.model.core.TokenTemplate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.core.TemplateFormula;
      reader.readMessage(value,proto.taxonomy.model.core.TemplateFormula.deserializeBinaryFromReader);
      msg.setFormula(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.core.TemplateDefinition;
      reader.readMessage(value,proto.taxonomy.model.core.TemplateDefinition.deserializeBinaryFromReader);
      msg.setDefinition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TokenTemplate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TokenTemplate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenTemplate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFormula();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.core.TemplateFormula.serializeBinaryToWriter
    );
  }
  f = message.getDefinition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.core.TemplateDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * optional TemplateFormula formula = 1;
 * @return {?proto.taxonomy.model.core.TemplateFormula}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.getFormula = function() {
  return /** @type{?proto.taxonomy.model.core.TemplateFormula} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.TemplateFormula, 1));
};


/** @param {?proto.taxonomy.model.core.TemplateFormula|undefined} value */
proto.taxonomy.model.core.TokenTemplate.prototype.setFormula = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.TokenTemplate.prototype.clearFormula = function() {
  this.setFormula(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.hasFormula = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TemplateDefinition definition = 2;
 * @return {?proto.taxonomy.model.core.TemplateDefinition}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.getDefinition = function() {
  return /** @type{?proto.taxonomy.model.core.TemplateDefinition} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.TemplateDefinition, 2));
};


/** @param {?proto.taxonomy.model.core.TemplateDefinition|undefined} value */
proto.taxonomy.model.core.TokenTemplate.prototype.setDefinition = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.core.TokenTemplate.prototype.clearDefinition = function() {
  this.setDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.hasDefinition = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TokenTemplates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.TokenTemplates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.TokenTemplates.displayName = 'proto.taxonomy.model.core.TokenTemplates';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TokenTemplates.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TokenTemplates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TokenTemplates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenTemplates.toObject = function(includeInstance, msg) {
  var f, obj = {
    templateMap: (f = msg.getTemplateMap()) ? f.toObject(includeInstance, proto.taxonomy.model.core.TokenTemplate.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TokenTemplates}
 */
proto.taxonomy.model.core.TokenTemplates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TokenTemplates;
  return proto.taxonomy.model.core.TokenTemplates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TokenTemplates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TokenTemplates}
 */
proto.taxonomy.model.core.TokenTemplates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getTemplateMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.taxonomy.model.core.TokenTemplate.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TokenTemplates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TokenTemplates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TokenTemplates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenTemplates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemplateMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.taxonomy.model.core.TokenTemplate.serializeBinaryToWriter);
  }
};


/**
 * map<string, TokenTemplate> template = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.taxonomy.model.core.TokenTemplate>}
 */
proto.taxonomy.model.core.TokenTemplates.prototype.getTemplateMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.taxonomy.model.core.TokenTemplate>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.taxonomy.model.core.TokenTemplate));
};


proto.taxonomy.model.core.TokenTemplates.prototype.clearTemplateMap = function() {
  this.getTemplateMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TemplateFormula = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.TemplateFormula.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.TemplateFormula, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.TemplateFormula.displayName = 'proto.taxonomy.model.core.TemplateFormula';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.TemplateFormula.repeatedFields_ = [4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TemplateFormula.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TemplateFormula.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TemplateFormula} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplateFormula.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifact: (f = msg.getArtifact()) && artifact_pb.Artifact.toObject(includeInstance, f),
    templateType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tokenBase: (f = msg.getTokenBase()) && proto.taxonomy.model.core.TemplateBase.toObject(includeInstance, f),
    behaviorsList: jspb.Message.toObjectList(msg.getBehaviorsList(),
    proto.taxonomy.model.core.TemplateBehavior.toObject, includeInstance),
    behaviorGroupsList: jspb.Message.toObjectList(msg.getBehaviorGroupsList(),
    proto.taxonomy.model.core.TemplateBehaviorGroup.toObject, includeInstance),
    propertySetsList: jspb.Message.toObjectList(msg.getPropertySetsList(),
    proto.taxonomy.model.core.TemplatePropertySet.toObject, includeInstance),
    childTokensList: jspb.Message.toObjectList(msg.getChildTokensList(),
    proto.taxonomy.model.core.TemplateFormula.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TemplateFormula}
 */
proto.taxonomy.model.core.TemplateFormula.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TemplateFormula;
  return proto.taxonomy.model.core.TemplateFormula.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TemplateFormula} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TemplateFormula}
 */
proto.taxonomy.model.core.TemplateFormula.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.Artifact;
      reader.readMessage(value,artifact_pb.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    case 2:
      var value = /** @type {!proto.taxonomy.model.artifact.TemplateType} */ (reader.readEnum());
      msg.setTemplateType(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.core.TemplateBase;
      reader.readMessage(value,proto.taxonomy.model.core.TemplateBase.deserializeBinaryFromReader);
      msg.setTokenBase(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.core.TemplateBehavior;
      reader.readMessage(value,proto.taxonomy.model.core.TemplateBehavior.deserializeBinaryFromReader);
      msg.addBehaviors(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.core.TemplateBehaviorGroup;
      reader.readMessage(value,proto.taxonomy.model.core.TemplateBehaviorGroup.deserializeBinaryFromReader);
      msg.addBehaviorGroups(value);
      break;
    case 6:
      var value = new proto.taxonomy.model.core.TemplatePropertySet;
      reader.readMessage(value,proto.taxonomy.model.core.TemplatePropertySet.deserializeBinaryFromReader);
      msg.addPropertySets(value);
      break;
    case 7:
      var value = new proto.taxonomy.model.core.TemplateFormula;
      reader.readMessage(value,proto.taxonomy.model.core.TemplateFormula.deserializeBinaryFromReader);
      msg.addChildTokens(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TemplateFormula.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TemplateFormula.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TemplateFormula} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplateFormula.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getTemplateType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTokenBase();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.taxonomy.model.core.TemplateBase.serializeBinaryToWriter
    );
  }
  f = message.getBehaviorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.taxonomy.model.core.TemplateBehavior.serializeBinaryToWriter
    );
  }
  f = message.getBehaviorGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.taxonomy.model.core.TemplateBehaviorGroup.serializeBinaryToWriter
    );
  }
  f = message.getPropertySetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.taxonomy.model.core.TemplatePropertySet.serializeBinaryToWriter
    );
  }
  f = message.getChildTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.taxonomy.model.core.TemplateFormula.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.Artifact artifact = 1;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.core.TemplateFormula.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Artifact, 1));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.core.TemplateFormula.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.TemplateFormula.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TemplateFormula.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional taxonomy.model.artifact.TemplateType template_type = 2;
 * @return {!proto.taxonomy.model.artifact.TemplateType}
 */
proto.taxonomy.model.core.TemplateFormula.prototype.getTemplateType = function() {
  return /** @type {!proto.taxonomy.model.artifact.TemplateType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.taxonomy.model.artifact.TemplateType} value */
proto.taxonomy.model.core.TemplateFormula.prototype.setTemplateType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional TemplateBase token_base = 3;
 * @return {?proto.taxonomy.model.core.TemplateBase}
 */
proto.taxonomy.model.core.TemplateFormula.prototype.getTokenBase = function() {
  return /** @type{?proto.taxonomy.model.core.TemplateBase} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.TemplateBase, 3));
};


/** @param {?proto.taxonomy.model.core.TemplateBase|undefined} value */
proto.taxonomy.model.core.TemplateFormula.prototype.setTokenBase = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.taxonomy.model.core.TemplateFormula.prototype.clearTokenBase = function() {
  this.setTokenBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TemplateFormula.prototype.hasTokenBase = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated TemplateBehavior behaviors = 4;
 * @return {!Array<!proto.taxonomy.model.core.TemplateBehavior>}
 */
proto.taxonomy.model.core.TemplateFormula.prototype.getBehaviorsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.TemplateBehavior>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.TemplateBehavior, 4));
};


/** @param {!Array<!proto.taxonomy.model.core.TemplateBehavior>} value */
proto.taxonomy.model.core.TemplateFormula.prototype.setBehaviorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.taxonomy.model.core.TemplateBehavior=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.TemplateBehavior}
 */
proto.taxonomy.model.core.TemplateFormula.prototype.addBehaviors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.taxonomy.model.core.TemplateBehavior, opt_index);
};


proto.taxonomy.model.core.TemplateFormula.prototype.clearBehaviorsList = function() {
  this.setBehaviorsList([]);
};


/**
 * repeated TemplateBehaviorGroup behavior_groups = 5;
 * @return {!Array<!proto.taxonomy.model.core.TemplateBehaviorGroup>}
 */
proto.taxonomy.model.core.TemplateFormula.prototype.getBehaviorGroupsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.TemplateBehaviorGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.TemplateBehaviorGroup, 5));
};


/** @param {!Array<!proto.taxonomy.model.core.TemplateBehaviorGroup>} value */
proto.taxonomy.model.core.TemplateFormula.prototype.setBehaviorGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.taxonomy.model.core.TemplateBehaviorGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.TemplateBehaviorGroup}
 */
proto.taxonomy.model.core.TemplateFormula.prototype.addBehaviorGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.taxonomy.model.core.TemplateBehaviorGroup, opt_index);
};


proto.taxonomy.model.core.TemplateFormula.prototype.clearBehaviorGroupsList = function() {
  this.setBehaviorGroupsList([]);
};


/**
 * repeated TemplatePropertySet property_sets = 6;
 * @return {!Array<!proto.taxonomy.model.core.TemplatePropertySet>}
 */
proto.taxonomy.model.core.TemplateFormula.prototype.getPropertySetsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.TemplatePropertySet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.TemplatePropertySet, 6));
};


/** @param {!Array<!proto.taxonomy.model.core.TemplatePropertySet>} value */
proto.taxonomy.model.core.TemplateFormula.prototype.setPropertySetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.taxonomy.model.core.TemplatePropertySet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.TemplatePropertySet}
 */
proto.taxonomy.model.core.TemplateFormula.prototype.addPropertySets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.taxonomy.model.core.TemplatePropertySet, opt_index);
};


proto.taxonomy.model.core.TemplateFormula.prototype.clearPropertySetsList = function() {
  this.setPropertySetsList([]);
};


/**
 * repeated TemplateFormula child_tokens = 7;
 * @return {!Array<!proto.taxonomy.model.core.TemplateFormula>}
 */
proto.taxonomy.model.core.TemplateFormula.prototype.getChildTokensList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.TemplateFormula>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.TemplateFormula, 7));
};


/** @param {!Array<!proto.taxonomy.model.core.TemplateFormula>} value */
proto.taxonomy.model.core.TemplateFormula.prototype.setChildTokensList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.taxonomy.model.core.TemplateFormula=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.TemplateFormula}
 */
proto.taxonomy.model.core.TemplateFormula.prototype.addChildTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.taxonomy.model.core.TemplateFormula, opt_index);
};


proto.taxonomy.model.core.TemplateFormula.prototype.clearChildTokensList = function() {
  this.setChildTokensList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TemplateFormulas = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.TemplateFormulas.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.TemplateFormulas, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.TemplateFormulas.displayName = 'proto.taxonomy.model.core.TemplateFormulas';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.TemplateFormulas.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TemplateFormulas.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TemplateFormulas.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TemplateFormulas} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplateFormulas.toObject = function(includeInstance, msg) {
  var f, obj = {
    templatesList: jspb.Message.toObjectList(msg.getTemplatesList(),
    proto.taxonomy.model.core.TemplateFormula.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TemplateFormulas}
 */
proto.taxonomy.model.core.TemplateFormulas.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TemplateFormulas;
  return proto.taxonomy.model.core.TemplateFormulas.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TemplateFormulas} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TemplateFormulas}
 */
proto.taxonomy.model.core.TemplateFormulas.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.core.TemplateFormula;
      reader.readMessage(value,proto.taxonomy.model.core.TemplateFormula.deserializeBinaryFromReader);
      msg.addTemplates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TemplateFormulas.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TemplateFormulas.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TemplateFormulas} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplateFormulas.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemplatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.taxonomy.model.core.TemplateFormula.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TemplateFormula templates = 1;
 * @return {!Array<!proto.taxonomy.model.core.TemplateFormula>}
 */
proto.taxonomy.model.core.TemplateFormulas.prototype.getTemplatesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.TemplateFormula>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.TemplateFormula, 1));
};


/** @param {!Array<!proto.taxonomy.model.core.TemplateFormula>} value */
proto.taxonomy.model.core.TemplateFormulas.prototype.setTemplatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.taxonomy.model.core.TemplateFormula=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.TemplateFormula}
 */
proto.taxonomy.model.core.TemplateFormulas.prototype.addTemplates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.taxonomy.model.core.TemplateFormula, opt_index);
};


proto.taxonomy.model.core.TemplateFormulas.prototype.clearTemplatesList = function() {
  this.setTemplatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TemplateBase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.TemplateBase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.TemplateBase.displayName = 'proto.taxonomy.model.core.TemplateBase';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TemplateBase.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TemplateBase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TemplateBase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplateBase.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: (f = msg.getBase()) && artifact_pb.ArtifactSymbol.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TemplateBase}
 */
proto.taxonomy.model.core.TemplateBase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TemplateBase;
  return proto.taxonomy.model.core.TemplateBase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TemplateBase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TemplateBase}
 */
proto.taxonomy.model.core.TemplateBase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.ArtifactSymbol;
      reader.readMessage(value,artifact_pb.ArtifactSymbol.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TemplateBase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TemplateBase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TemplateBase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplateBase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.ArtifactSymbol.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.ArtifactSymbol base = 1;
 * @return {?proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.core.TemplateBase.prototype.getBase = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactSymbol} */ (
    jspb.Message.getWrapperField(this, artifact_pb.ArtifactSymbol, 1));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactSymbol|undefined} value */
proto.taxonomy.model.core.TemplateBase.prototype.setBase = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.TemplateBase.prototype.clearBase = function() {
  this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TemplateBase.prototype.hasBase = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TemplateBehavior = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.TemplateBehavior, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.TemplateBehavior.displayName = 'proto.taxonomy.model.core.TemplateBehavior';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TemplateBehavior.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TemplateBehavior.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TemplateBehavior} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplateBehavior.toObject = function(includeInstance, msg) {
  var f, obj = {
    behavior: (f = msg.getBehavior()) && artifact_pb.ArtifactSymbol.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TemplateBehavior}
 */
proto.taxonomy.model.core.TemplateBehavior.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TemplateBehavior;
  return proto.taxonomy.model.core.TemplateBehavior.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TemplateBehavior} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TemplateBehavior}
 */
proto.taxonomy.model.core.TemplateBehavior.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.ArtifactSymbol;
      reader.readMessage(value,artifact_pb.ArtifactSymbol.deserializeBinaryFromReader);
      msg.setBehavior(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TemplateBehavior.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TemplateBehavior.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TemplateBehavior} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplateBehavior.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBehavior();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.ArtifactSymbol.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.ArtifactSymbol behavior = 1;
 * @return {?proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.core.TemplateBehavior.prototype.getBehavior = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactSymbol} */ (
    jspb.Message.getWrapperField(this, artifact_pb.ArtifactSymbol, 1));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactSymbol|undefined} value */
proto.taxonomy.model.core.TemplateBehavior.prototype.setBehavior = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.TemplateBehavior.prototype.clearBehavior = function() {
  this.setBehavior(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TemplateBehavior.prototype.hasBehavior = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TemplateBehaviorGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.TemplateBehaviorGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.TemplateBehaviorGroup.displayName = 'proto.taxonomy.model.core.TemplateBehaviorGroup';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TemplateBehaviorGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TemplateBehaviorGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TemplateBehaviorGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplateBehaviorGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    behaviorGroup: (f = msg.getBehaviorGroup()) && artifact_pb.ArtifactSymbol.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TemplateBehaviorGroup}
 */
proto.taxonomy.model.core.TemplateBehaviorGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TemplateBehaviorGroup;
  return proto.taxonomy.model.core.TemplateBehaviorGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TemplateBehaviorGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TemplateBehaviorGroup}
 */
proto.taxonomy.model.core.TemplateBehaviorGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.ArtifactSymbol;
      reader.readMessage(value,artifact_pb.ArtifactSymbol.deserializeBinaryFromReader);
      msg.setBehaviorGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TemplateBehaviorGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TemplateBehaviorGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TemplateBehaviorGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplateBehaviorGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBehaviorGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.ArtifactSymbol.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.ArtifactSymbol behavior_group = 1;
 * @return {?proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.core.TemplateBehaviorGroup.prototype.getBehaviorGroup = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactSymbol} */ (
    jspb.Message.getWrapperField(this, artifact_pb.ArtifactSymbol, 1));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactSymbol|undefined} value */
proto.taxonomy.model.core.TemplateBehaviorGroup.prototype.setBehaviorGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.TemplateBehaviorGroup.prototype.clearBehaviorGroup = function() {
  this.setBehaviorGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TemplateBehaviorGroup.prototype.hasBehaviorGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TemplatePropertySet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.TemplatePropertySet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.TemplatePropertySet.displayName = 'proto.taxonomy.model.core.TemplatePropertySet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TemplatePropertySet.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TemplatePropertySet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TemplatePropertySet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplatePropertySet.toObject = function(includeInstance, msg) {
  var f, obj = {
    propertySet: (f = msg.getPropertySet()) && artifact_pb.ArtifactSymbol.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TemplatePropertySet}
 */
proto.taxonomy.model.core.TemplatePropertySet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TemplatePropertySet;
  return proto.taxonomy.model.core.TemplatePropertySet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TemplatePropertySet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TemplatePropertySet}
 */
proto.taxonomy.model.core.TemplatePropertySet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.ArtifactSymbol;
      reader.readMessage(value,artifact_pb.ArtifactSymbol.deserializeBinaryFromReader);
      msg.setPropertySet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TemplatePropertySet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TemplatePropertySet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TemplatePropertySet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplatePropertySet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropertySet();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.ArtifactSymbol.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.ArtifactSymbol property_set = 1;
 * @return {?proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.core.TemplatePropertySet.prototype.getPropertySet = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactSymbol} */ (
    jspb.Message.getWrapperField(this, artifact_pb.ArtifactSymbol, 1));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactSymbol|undefined} value */
proto.taxonomy.model.core.TemplatePropertySet.prototype.setPropertySet = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.TemplatePropertySet.prototype.clearPropertySet = function() {
  this.setPropertySet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TemplatePropertySet.prototype.hasPropertySet = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TemplateDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.TemplateDefinition.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.TemplateDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.TemplateDefinition.displayName = 'proto.taxonomy.model.core.TemplateDefinition';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.TemplateDefinition.repeatedFields_ = [4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TemplateDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TemplateDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplateDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifact: (f = msg.getArtifact()) && artifact_pb.Artifact.toObject(includeInstance, f),
    formulaReference: (f = msg.getFormulaReference()) && artifact_pb.ArtifactReference.toObject(includeInstance, f),
    tokenBase: (f = msg.getTokenBase()) && proto.taxonomy.model.core.BaseReference.toObject(includeInstance, f),
    behaviorsList: jspb.Message.toObjectList(msg.getBehaviorsList(),
    proto.taxonomy.model.core.BehaviorReference.toObject, includeInstance),
    behaviorGroupsList: jspb.Message.toObjectList(msg.getBehaviorGroupsList(),
    proto.taxonomy.model.core.BehaviorGroupReference.toObject, includeInstance),
    propertySetsList: jspb.Message.toObjectList(msg.getPropertySetsList(),
    proto.taxonomy.model.core.PropertySetReference.toObject, includeInstance),
    childTokensList: jspb.Message.toObjectList(msg.getChildTokensList(),
    proto.taxonomy.model.core.TemplateDefinition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TemplateDefinition}
 */
proto.taxonomy.model.core.TemplateDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TemplateDefinition;
  return proto.taxonomy.model.core.TemplateDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TemplateDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TemplateDefinition}
 */
proto.taxonomy.model.core.TemplateDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.Artifact;
      reader.readMessage(value,artifact_pb.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    case 2:
      var value = new artifact_pb.ArtifactReference;
      reader.readMessage(value,artifact_pb.ArtifactReference.deserializeBinaryFromReader);
      msg.setFormulaReference(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.core.BaseReference;
      reader.readMessage(value,proto.taxonomy.model.core.BaseReference.deserializeBinaryFromReader);
      msg.setTokenBase(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.core.BehaviorReference;
      reader.readMessage(value,proto.taxonomy.model.core.BehaviorReference.deserializeBinaryFromReader);
      msg.addBehaviors(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.core.BehaviorGroupReference;
      reader.readMessage(value,proto.taxonomy.model.core.BehaviorGroupReference.deserializeBinaryFromReader);
      msg.addBehaviorGroups(value);
      break;
    case 6:
      var value = new proto.taxonomy.model.core.PropertySetReference;
      reader.readMessage(value,proto.taxonomy.model.core.PropertySetReference.deserializeBinaryFromReader);
      msg.addPropertySets(value);
      break;
    case 7:
      var value = new proto.taxonomy.model.core.TemplateDefinition;
      reader.readMessage(value,proto.taxonomy.model.core.TemplateDefinition.deserializeBinaryFromReader);
      msg.addChildTokens(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TemplateDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TemplateDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplateDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getFormulaReference();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      artifact_pb.ArtifactReference.serializeBinaryToWriter
    );
  }
  f = message.getTokenBase();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.taxonomy.model.core.BaseReference.serializeBinaryToWriter
    );
  }
  f = message.getBehaviorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.taxonomy.model.core.BehaviorReference.serializeBinaryToWriter
    );
  }
  f = message.getBehaviorGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.taxonomy.model.core.BehaviorGroupReference.serializeBinaryToWriter
    );
  }
  f = message.getPropertySetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.taxonomy.model.core.PropertySetReference.serializeBinaryToWriter
    );
  }
  f = message.getChildTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.taxonomy.model.core.TemplateDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.Artifact artifact = 1;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Artifact, 1));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.core.TemplateDefinition.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.TemplateDefinition.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional taxonomy.model.artifact.ArtifactReference formula_reference = 2;
 * @return {?proto.taxonomy.model.artifact.ArtifactReference}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.getFormulaReference = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactReference} */ (
    jspb.Message.getWrapperField(this, artifact_pb.ArtifactReference, 2));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactReference|undefined} value */
proto.taxonomy.model.core.TemplateDefinition.prototype.setFormulaReference = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.core.TemplateDefinition.prototype.clearFormulaReference = function() {
  this.setFormulaReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.hasFormulaReference = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BaseReference token_base = 3;
 * @return {?proto.taxonomy.model.core.BaseReference}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.getTokenBase = function() {
  return /** @type{?proto.taxonomy.model.core.BaseReference} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.BaseReference, 3));
};


/** @param {?proto.taxonomy.model.core.BaseReference|undefined} value */
proto.taxonomy.model.core.TemplateDefinition.prototype.setTokenBase = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.taxonomy.model.core.TemplateDefinition.prototype.clearTokenBase = function() {
  this.setTokenBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.hasTokenBase = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated BehaviorReference behaviors = 4;
 * @return {!Array<!proto.taxonomy.model.core.BehaviorReference>}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.getBehaviorsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.BehaviorReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.BehaviorReference, 4));
};


/** @param {!Array<!proto.taxonomy.model.core.BehaviorReference>} value */
proto.taxonomy.model.core.TemplateDefinition.prototype.setBehaviorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.taxonomy.model.core.BehaviorReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.BehaviorReference}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.addBehaviors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.taxonomy.model.core.BehaviorReference, opt_index);
};


proto.taxonomy.model.core.TemplateDefinition.prototype.clearBehaviorsList = function() {
  this.setBehaviorsList([]);
};


/**
 * repeated BehaviorGroupReference behavior_groups = 5;
 * @return {!Array<!proto.taxonomy.model.core.BehaviorGroupReference>}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.getBehaviorGroupsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.BehaviorGroupReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.BehaviorGroupReference, 5));
};


/** @param {!Array<!proto.taxonomy.model.core.BehaviorGroupReference>} value */
proto.taxonomy.model.core.TemplateDefinition.prototype.setBehaviorGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.taxonomy.model.core.BehaviorGroupReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.BehaviorGroupReference}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.addBehaviorGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.taxonomy.model.core.BehaviorGroupReference, opt_index);
};


proto.taxonomy.model.core.TemplateDefinition.prototype.clearBehaviorGroupsList = function() {
  this.setBehaviorGroupsList([]);
};


/**
 * repeated PropertySetReference property_sets = 6;
 * @return {!Array<!proto.taxonomy.model.core.PropertySetReference>}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.getPropertySetsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.PropertySetReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.PropertySetReference, 6));
};


/** @param {!Array<!proto.taxonomy.model.core.PropertySetReference>} value */
proto.taxonomy.model.core.TemplateDefinition.prototype.setPropertySetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.taxonomy.model.core.PropertySetReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.PropertySetReference}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.addPropertySets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.taxonomy.model.core.PropertySetReference, opt_index);
};


proto.taxonomy.model.core.TemplateDefinition.prototype.clearPropertySetsList = function() {
  this.setPropertySetsList([]);
};


/**
 * repeated TemplateDefinition child_tokens = 7;
 * @return {!Array<!proto.taxonomy.model.core.TemplateDefinition>}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.getChildTokensList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.TemplateDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.TemplateDefinition, 7));
};


/** @param {!Array<!proto.taxonomy.model.core.TemplateDefinition>} value */
proto.taxonomy.model.core.TemplateDefinition.prototype.setChildTokensList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.taxonomy.model.core.TemplateDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.TemplateDefinition}
 */
proto.taxonomy.model.core.TemplateDefinition.prototype.addChildTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.taxonomy.model.core.TemplateDefinition, opt_index);
};


proto.taxonomy.model.core.TemplateDefinition.prototype.clearChildTokensList = function() {
  this.setChildTokensList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TemplateDefinitions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.TemplateDefinitions.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.TemplateDefinitions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.TemplateDefinitions.displayName = 'proto.taxonomy.model.core.TemplateDefinitions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.TemplateDefinitions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TemplateDefinitions.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TemplateDefinitions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TemplateDefinitions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplateDefinitions.toObject = function(includeInstance, msg) {
  var f, obj = {
    definitionsList: jspb.Message.toObjectList(msg.getDefinitionsList(),
    proto.taxonomy.model.core.TemplateDefinition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TemplateDefinitions}
 */
proto.taxonomy.model.core.TemplateDefinitions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TemplateDefinitions;
  return proto.taxonomy.model.core.TemplateDefinitions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TemplateDefinitions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TemplateDefinitions}
 */
proto.taxonomy.model.core.TemplateDefinitions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.core.TemplateDefinition;
      reader.readMessage(value,proto.taxonomy.model.core.TemplateDefinition.deserializeBinaryFromReader);
      msg.addDefinitions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TemplateDefinitions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TemplateDefinitions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TemplateDefinitions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TemplateDefinitions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefinitionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.taxonomy.model.core.TemplateDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TemplateDefinition definitions = 1;
 * @return {!Array<!proto.taxonomy.model.core.TemplateDefinition>}
 */
proto.taxonomy.model.core.TemplateDefinitions.prototype.getDefinitionsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.TemplateDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.TemplateDefinition, 1));
};


/** @param {!Array<!proto.taxonomy.model.core.TemplateDefinition>} value */
proto.taxonomy.model.core.TemplateDefinitions.prototype.setDefinitionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.taxonomy.model.core.TemplateDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.TemplateDefinition}
 */
proto.taxonomy.model.core.TemplateDefinitions.prototype.addDefinitions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.taxonomy.model.core.TemplateDefinition, opt_index);
};


proto.taxonomy.model.core.TemplateDefinitions.prototype.clearDefinitionsList = function() {
  this.setDefinitionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.InfluenceBinding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.InfluenceBinding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.InfluenceBinding.displayName = 'proto.taxonomy.model.core.InfluenceBinding';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.InfluenceBinding.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.InfluenceBinding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.InfluenceBinding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InfluenceBinding.toObject = function(includeInstance, msg) {
  var f, obj = {
    influencedId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    influencedInvocationId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    influenceType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    influencingInvocation: (f = msg.getInfluencingInvocation()) && proto.taxonomy.model.core.Invocation.toObject(includeInstance, f),
    influencedInvocation: (f = msg.getInfluencedInvocation()) && proto.taxonomy.model.core.Invocation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.InfluenceBinding}
 */
proto.taxonomy.model.core.InfluenceBinding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.InfluenceBinding;
  return proto.taxonomy.model.core.InfluenceBinding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.InfluenceBinding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.InfluenceBinding}
 */
proto.taxonomy.model.core.InfluenceBinding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfluencedId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfluencedInvocationId(value);
      break;
    case 3:
      var value = /** @type {!proto.taxonomy.model.core.InfluenceType} */ (reader.readEnum());
      msg.setInfluenceType(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.core.Invocation;
      reader.readMessage(value,proto.taxonomy.model.core.Invocation.deserializeBinaryFromReader);
      msg.setInfluencingInvocation(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.core.Invocation;
      reader.readMessage(value,proto.taxonomy.model.core.Invocation.deserializeBinaryFromReader);
      msg.setInfluencedInvocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.InfluenceBinding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.InfluenceBinding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.InfluenceBinding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InfluenceBinding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfluencedId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInfluencedInvocationId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInfluenceType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getInfluencingInvocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.taxonomy.model.core.Invocation.serializeBinaryToWriter
    );
  }
  f = message.getInfluencedInvocation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.taxonomy.model.core.Invocation.serializeBinaryToWriter
    );
  }
};


/**
 * optional string influenced_id = 1;
 * @return {string}
 */
proto.taxonomy.model.core.InfluenceBinding.prototype.getInfluencedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InfluenceBinding.prototype.setInfluencedId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string influenced_invocation_id = 2;
 * @return {string}
 */
proto.taxonomy.model.core.InfluenceBinding.prototype.getInfluencedInvocationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InfluenceBinding.prototype.setInfluencedInvocationId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional InfluenceType influence_type = 3;
 * @return {!proto.taxonomy.model.core.InfluenceType}
 */
proto.taxonomy.model.core.InfluenceBinding.prototype.getInfluenceType = function() {
  return /** @type {!proto.taxonomy.model.core.InfluenceType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.taxonomy.model.core.InfluenceType} value */
proto.taxonomy.model.core.InfluenceBinding.prototype.setInfluenceType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Invocation influencing_invocation = 4;
 * @return {?proto.taxonomy.model.core.Invocation}
 */
proto.taxonomy.model.core.InfluenceBinding.prototype.getInfluencingInvocation = function() {
  return /** @type{?proto.taxonomy.model.core.Invocation} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.Invocation, 4));
};


/** @param {?proto.taxonomy.model.core.Invocation|undefined} value */
proto.taxonomy.model.core.InfluenceBinding.prototype.setInfluencingInvocation = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.taxonomy.model.core.InfluenceBinding.prototype.clearInfluencingInvocation = function() {
  this.setInfluencingInvocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.InfluenceBinding.prototype.hasInfluencingInvocation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Invocation influenced_invocation = 5;
 * @return {?proto.taxonomy.model.core.Invocation}
 */
proto.taxonomy.model.core.InfluenceBinding.prototype.getInfluencedInvocation = function() {
  return /** @type{?proto.taxonomy.model.core.Invocation} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.Invocation, 5));
};


/** @param {?proto.taxonomy.model.core.Invocation|undefined} value */
proto.taxonomy.model.core.InfluenceBinding.prototype.setInfluencedInvocation = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.taxonomy.model.core.InfluenceBinding.prototype.clearInfluencedInvocation = function() {
  this.setInfluencedInvocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.InfluenceBinding.prototype.hasInfluencedInvocation = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TokenSpecification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.TokenSpecification.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.TokenSpecification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.TokenSpecification.displayName = 'proto.taxonomy.model.core.TokenSpecification';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.TokenSpecification.repeatedFields_ = [5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TokenSpecification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TokenSpecification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenSpecification.toObject = function(includeInstance, msg) {
  var f, obj = {
    specificationHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    artifact: (f = msg.getArtifact()) && artifact_pb.Artifact.toObject(includeInstance, f),
    definitionReference: (f = msg.getDefinitionReference()) && artifact_pb.ArtifactReference.toObject(includeInstance, f),
    tokenBase: (f = msg.getTokenBase()) && proto.taxonomy.model.core.Base.toObject(includeInstance, f),
    behaviorsList: jspb.Message.toObjectList(msg.getBehaviorsList(),
    proto.taxonomy.model.core.BehaviorSpecification.toObject, includeInstance),
    behaviorGroupsList: jspb.Message.toObjectList(msg.getBehaviorGroupsList(),
    proto.taxonomy.model.core.BehaviorGroupSpecification.toObject, includeInstance),
    propertySetsList: jspb.Message.toObjectList(msg.getPropertySetsList(),
    proto.taxonomy.model.core.PropertySetSpecification.toObject, includeInstance),
    childTokensList: jspb.Message.toObjectList(msg.getChildTokensList(),
    proto.taxonomy.model.core.TokenSpecification.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TokenSpecification}
 */
proto.taxonomy.model.core.TokenSpecification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TokenSpecification;
  return proto.taxonomy.model.core.TokenSpecification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TokenSpecification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TokenSpecification}
 */
proto.taxonomy.model.core.TokenSpecification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpecificationHash(value);
      break;
    case 2:
      var value = new artifact_pb.Artifact;
      reader.readMessage(value,artifact_pb.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    case 3:
      var value = new artifact_pb.ArtifactReference;
      reader.readMessage(value,artifact_pb.ArtifactReference.deserializeBinaryFromReader);
      msg.setDefinitionReference(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.core.Base;
      reader.readMessage(value,proto.taxonomy.model.core.Base.deserializeBinaryFromReader);
      msg.setTokenBase(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.core.BehaviorSpecification;
      reader.readMessage(value,proto.taxonomy.model.core.BehaviorSpecification.deserializeBinaryFromReader);
      msg.addBehaviors(value);
      break;
    case 6:
      var value = new proto.taxonomy.model.core.BehaviorGroupSpecification;
      reader.readMessage(value,proto.taxonomy.model.core.BehaviorGroupSpecification.deserializeBinaryFromReader);
      msg.addBehaviorGroups(value);
      break;
    case 7:
      var value = new proto.taxonomy.model.core.PropertySetSpecification;
      reader.readMessage(value,proto.taxonomy.model.core.PropertySetSpecification.deserializeBinaryFromReader);
      msg.addPropertySets(value);
      break;
    case 8:
      var value = new proto.taxonomy.model.core.TokenSpecification;
      reader.readMessage(value,proto.taxonomy.model.core.TokenSpecification.deserializeBinaryFromReader);
      msg.addChildTokens(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TokenSpecification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TokenSpecification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenSpecification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpecificationHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      artifact_pb.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getDefinitionReference();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      artifact_pb.ArtifactReference.serializeBinaryToWriter
    );
  }
  f = message.getTokenBase();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.taxonomy.model.core.Base.serializeBinaryToWriter
    );
  }
  f = message.getBehaviorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.taxonomy.model.core.BehaviorSpecification.serializeBinaryToWriter
    );
  }
  f = message.getBehaviorGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.taxonomy.model.core.BehaviorGroupSpecification.serializeBinaryToWriter
    );
  }
  f = message.getPropertySetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.taxonomy.model.core.PropertySetSpecification.serializeBinaryToWriter
    );
  }
  f = message.getChildTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.taxonomy.model.core.TokenSpecification.serializeBinaryToWriter
    );
  }
};


/**
 * optional string specification_hash = 1;
 * @return {string}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.getSpecificationHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.TokenSpecification.prototype.setSpecificationHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional taxonomy.model.artifact.Artifact artifact = 2;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Artifact, 2));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.core.TokenSpecification.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.core.TokenSpecification.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional taxonomy.model.artifact.ArtifactReference definition_reference = 3;
 * @return {?proto.taxonomy.model.artifact.ArtifactReference}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.getDefinitionReference = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactReference} */ (
    jspb.Message.getWrapperField(this, artifact_pb.ArtifactReference, 3));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactReference|undefined} value */
proto.taxonomy.model.core.TokenSpecification.prototype.setDefinitionReference = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.taxonomy.model.core.TokenSpecification.prototype.clearDefinitionReference = function() {
  this.setDefinitionReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.hasDefinitionReference = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Base token_base = 4;
 * @return {?proto.taxonomy.model.core.Base}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.getTokenBase = function() {
  return /** @type{?proto.taxonomy.model.core.Base} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.Base, 4));
};


/** @param {?proto.taxonomy.model.core.Base|undefined} value */
proto.taxonomy.model.core.TokenSpecification.prototype.setTokenBase = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.taxonomy.model.core.TokenSpecification.prototype.clearTokenBase = function() {
  this.setTokenBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.hasTokenBase = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated BehaviorSpecification behaviors = 5;
 * @return {!Array<!proto.taxonomy.model.core.BehaviorSpecification>}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.getBehaviorsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.BehaviorSpecification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.BehaviorSpecification, 5));
};


/** @param {!Array<!proto.taxonomy.model.core.BehaviorSpecification>} value */
proto.taxonomy.model.core.TokenSpecification.prototype.setBehaviorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.taxonomy.model.core.BehaviorSpecification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.BehaviorSpecification}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.addBehaviors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.taxonomy.model.core.BehaviorSpecification, opt_index);
};


proto.taxonomy.model.core.TokenSpecification.prototype.clearBehaviorsList = function() {
  this.setBehaviorsList([]);
};


/**
 * repeated BehaviorGroupSpecification behavior_groups = 6;
 * @return {!Array<!proto.taxonomy.model.core.BehaviorGroupSpecification>}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.getBehaviorGroupsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.BehaviorGroupSpecification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.BehaviorGroupSpecification, 6));
};


/** @param {!Array<!proto.taxonomy.model.core.BehaviorGroupSpecification>} value */
proto.taxonomy.model.core.TokenSpecification.prototype.setBehaviorGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.taxonomy.model.core.BehaviorGroupSpecification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.BehaviorGroupSpecification}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.addBehaviorGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.taxonomy.model.core.BehaviorGroupSpecification, opt_index);
};


proto.taxonomy.model.core.TokenSpecification.prototype.clearBehaviorGroupsList = function() {
  this.setBehaviorGroupsList([]);
};


/**
 * repeated PropertySetSpecification property_sets = 7;
 * @return {!Array<!proto.taxonomy.model.core.PropertySetSpecification>}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.getPropertySetsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.PropertySetSpecification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.PropertySetSpecification, 7));
};


/** @param {!Array<!proto.taxonomy.model.core.PropertySetSpecification>} value */
proto.taxonomy.model.core.TokenSpecification.prototype.setPropertySetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.taxonomy.model.core.PropertySetSpecification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.PropertySetSpecification}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.addPropertySets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.taxonomy.model.core.PropertySetSpecification, opt_index);
};


proto.taxonomy.model.core.TokenSpecification.prototype.clearPropertySetsList = function() {
  this.setPropertySetsList([]);
};


/**
 * repeated TokenSpecification child_tokens = 8;
 * @return {!Array<!proto.taxonomy.model.core.TokenSpecification>}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.getChildTokensList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.TokenSpecification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.TokenSpecification, 8));
};


/** @param {!Array<!proto.taxonomy.model.core.TokenSpecification>} value */
proto.taxonomy.model.core.TokenSpecification.prototype.setChildTokensList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.taxonomy.model.core.TokenSpecification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.TokenSpecification}
 */
proto.taxonomy.model.core.TokenSpecification.prototype.addChildTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.taxonomy.model.core.TokenSpecification, opt_index);
};


proto.taxonomy.model.core.TokenSpecification.prototype.clearChildTokensList = function() {
  this.setChildTokensList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.BehaviorSpecification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.BehaviorSpecification.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.BehaviorSpecification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.BehaviorSpecification.displayName = 'proto.taxonomy.model.core.BehaviorSpecification';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.BehaviorSpecification.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.BehaviorSpecification.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.BehaviorSpecification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.BehaviorSpecification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BehaviorSpecification.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifact: (f = msg.getArtifact()) && artifact_pb.Artifact.toObject(includeInstance, f),
    isExternal: jspb.Message.getFieldWithDefault(msg, 2, false),
    constructorType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    constructor: (f = msg.getConstructor()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    invocationsList: jspb.Message.toObjectList(msg.getInvocationsList(),
    proto.taxonomy.model.core.InvocationBinding.toObject, includeInstance),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.taxonomy.model.core.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.BehaviorSpecification}
 */
proto.taxonomy.model.core.BehaviorSpecification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.BehaviorSpecification;
  return proto.taxonomy.model.core.BehaviorSpecification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.BehaviorSpecification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.BehaviorSpecification}
 */
proto.taxonomy.model.core.BehaviorSpecification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.Artifact;
      reader.readMessage(value,artifact_pb.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsExternal(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConstructorType(value);
      break;
    case 4:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setConstructor(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.core.InvocationBinding;
      reader.readMessage(value,proto.taxonomy.model.core.InvocationBinding.deserializeBinaryFromReader);
      msg.addInvocations(value);
      break;
    case 6:
      var value = new proto.taxonomy.model.core.Property;
      reader.readMessage(value,proto.taxonomy.model.core.Property.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.BehaviorSpecification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.BehaviorSpecification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.BehaviorSpecification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BehaviorSpecification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getIsExternal();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getConstructorType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConstructor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getInvocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.taxonomy.model.core.InvocationBinding.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.taxonomy.model.core.Property.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.Artifact artifact = 1;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.core.BehaviorSpecification.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Artifact, 1));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.core.BehaviorSpecification.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.BehaviorSpecification.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.BehaviorSpecification.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_external = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.taxonomy.model.core.BehaviorSpecification.prototype.getIsExternal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.taxonomy.model.core.BehaviorSpecification.prototype.setIsExternal = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string constructor_type = 3;
 * @return {string}
 */
proto.taxonomy.model.core.BehaviorSpecification.prototype.getConstructorType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.BehaviorSpecification.prototype.setConstructorType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Any constructor = 4;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.core.BehaviorSpecification.prototype.getConstructor = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 4));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.core.BehaviorSpecification.prototype.setConstructor = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.taxonomy.model.core.BehaviorSpecification.prototype.clearConstructor = function() {
  this.setConstructor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.BehaviorSpecification.prototype.hasConstructor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated InvocationBinding invocations = 5;
 * @return {!Array<!proto.taxonomy.model.core.InvocationBinding>}
 */
proto.taxonomy.model.core.BehaviorSpecification.prototype.getInvocationsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.InvocationBinding>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.InvocationBinding, 5));
};


/** @param {!Array<!proto.taxonomy.model.core.InvocationBinding>} value */
proto.taxonomy.model.core.BehaviorSpecification.prototype.setInvocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.taxonomy.model.core.InvocationBinding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.InvocationBinding}
 */
proto.taxonomy.model.core.BehaviorSpecification.prototype.addInvocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.taxonomy.model.core.InvocationBinding, opt_index);
};


proto.taxonomy.model.core.BehaviorSpecification.prototype.clearInvocationsList = function() {
  this.setInvocationsList([]);
};


/**
 * repeated Property properties = 6;
 * @return {!Array<!proto.taxonomy.model.core.Property>}
 */
proto.taxonomy.model.core.BehaviorSpecification.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Property, 6));
};


/** @param {!Array<!proto.taxonomy.model.core.Property>} value */
proto.taxonomy.model.core.BehaviorSpecification.prototype.setPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.taxonomy.model.core.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Property}
 */
proto.taxonomy.model.core.BehaviorSpecification.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.taxonomy.model.core.Property, opt_index);
};


proto.taxonomy.model.core.BehaviorSpecification.prototype.clearPropertiesList = function() {
  this.setPropertiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.PropertySetSpecification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.PropertySetSpecification.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.PropertySetSpecification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.PropertySetSpecification.displayName = 'proto.taxonomy.model.core.PropertySetSpecification';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.PropertySetSpecification.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.PropertySetSpecification.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.PropertySetSpecification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.PropertySetSpecification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.PropertySetSpecification.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifact: (f = msg.getArtifact()) && artifact_pb.Artifact.toObject(includeInstance, f),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.taxonomy.model.core.PropertySpecification.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.PropertySetSpecification}
 */
proto.taxonomy.model.core.PropertySetSpecification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.PropertySetSpecification;
  return proto.taxonomy.model.core.PropertySetSpecification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.PropertySetSpecification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.PropertySetSpecification}
 */
proto.taxonomy.model.core.PropertySetSpecification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.Artifact;
      reader.readMessage(value,artifact_pb.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    case 6:
      var value = new proto.taxonomy.model.core.PropertySpecification;
      reader.readMessage(value,proto.taxonomy.model.core.PropertySpecification.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.PropertySetSpecification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.PropertySetSpecification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.PropertySetSpecification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.PropertySetSpecification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.taxonomy.model.core.PropertySpecification.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.Artifact artifact = 1;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.core.PropertySetSpecification.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Artifact, 1));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.core.PropertySetSpecification.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.PropertySetSpecification.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.PropertySetSpecification.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PropertySpecification properties = 6;
 * @return {!Array<!proto.taxonomy.model.core.PropertySpecification>}
 */
proto.taxonomy.model.core.PropertySetSpecification.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.PropertySpecification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.PropertySpecification, 6));
};


/** @param {!Array<!proto.taxonomy.model.core.PropertySpecification>} value */
proto.taxonomy.model.core.PropertySetSpecification.prototype.setPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.taxonomy.model.core.PropertySpecification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.PropertySpecification}
 */
proto.taxonomy.model.core.PropertySetSpecification.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.taxonomy.model.core.PropertySpecification, opt_index);
};


proto.taxonomy.model.core.PropertySetSpecification.prototype.clearPropertiesList = function() {
  this.setPropertiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.PropertySpecification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.PropertySpecification.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.PropertySpecification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.PropertySpecification.displayName = 'proto.taxonomy.model.core.PropertySpecification';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.PropertySpecification.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.PropertySpecification.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.PropertySpecification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.PropertySpecification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.PropertySpecification.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valueDescription: jspb.Message.getFieldWithDefault(msg, 2, ""),
    templateValue: jspb.Message.getFieldWithDefault(msg, 3, ""),
    propertyInvocationsList: jspb.Message.toObjectList(msg.getPropertyInvocationsList(),
    proto.taxonomy.model.core.InvocationBinding.toObject, includeInstance),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.taxonomy.model.core.PropertySpecification.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.PropertySpecification}
 */
proto.taxonomy.model.core.PropertySpecification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.PropertySpecification;
  return proto.taxonomy.model.core.PropertySpecification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.PropertySpecification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.PropertySpecification}
 */
proto.taxonomy.model.core.PropertySpecification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValueDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemplateValue(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.core.InvocationBinding;
      reader.readMessage(value,proto.taxonomy.model.core.InvocationBinding.deserializeBinaryFromReader);
      msg.addPropertyInvocations(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.core.PropertySpecification;
      reader.readMessage(value,proto.taxonomy.model.core.PropertySpecification.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.PropertySpecification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.PropertySpecification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.PropertySpecification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.PropertySpecification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValueDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTemplateValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPropertyInvocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.taxonomy.model.core.InvocationBinding.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.taxonomy.model.core.PropertySpecification.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.taxonomy.model.core.PropertySpecification.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.PropertySpecification.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value_description = 2;
 * @return {string}
 */
proto.taxonomy.model.core.PropertySpecification.prototype.getValueDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.PropertySpecification.prototype.setValueDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string template_value = 3;
 * @return {string}
 */
proto.taxonomy.model.core.PropertySpecification.prototype.getTemplateValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.PropertySpecification.prototype.setTemplateValue = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated InvocationBinding property_invocations = 4;
 * @return {!Array<!proto.taxonomy.model.core.InvocationBinding>}
 */
proto.taxonomy.model.core.PropertySpecification.prototype.getPropertyInvocationsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.InvocationBinding>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.InvocationBinding, 4));
};


/** @param {!Array<!proto.taxonomy.model.core.InvocationBinding>} value */
proto.taxonomy.model.core.PropertySpecification.prototype.setPropertyInvocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.taxonomy.model.core.InvocationBinding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.InvocationBinding}
 */
proto.taxonomy.model.core.PropertySpecification.prototype.addPropertyInvocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.taxonomy.model.core.InvocationBinding, opt_index);
};


proto.taxonomy.model.core.PropertySpecification.prototype.clearPropertyInvocationsList = function() {
  this.setPropertyInvocationsList([]);
};


/**
 * repeated PropertySpecification properties = 5;
 * @return {!Array<!proto.taxonomy.model.core.PropertySpecification>}
 */
proto.taxonomy.model.core.PropertySpecification.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.PropertySpecification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.PropertySpecification, 5));
};


/** @param {!Array<!proto.taxonomy.model.core.PropertySpecification>} value */
proto.taxonomy.model.core.PropertySpecification.prototype.setPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.taxonomy.model.core.PropertySpecification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.PropertySpecification}
 */
proto.taxonomy.model.core.PropertySpecification.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.taxonomy.model.core.PropertySpecification, opt_index);
};


proto.taxonomy.model.core.PropertySpecification.prototype.clearPropertiesList = function() {
  this.setPropertiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.BehaviorGroupSpecification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.BehaviorGroupSpecification.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.BehaviorGroupSpecification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.BehaviorGroupSpecification.displayName = 'proto.taxonomy.model.core.BehaviorGroupSpecification';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.BehaviorGroupSpecification.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.BehaviorGroupSpecification.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.BehaviorGroupSpecification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.BehaviorGroupSpecification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BehaviorGroupSpecification.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifact: (f = msg.getArtifact()) && artifact_pb.Artifact.toObject(includeInstance, f),
    behaviorsList: jspb.Message.toObjectList(msg.getBehaviorsList(),
    artifact_pb.ArtifactSymbol.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.BehaviorGroupSpecification}
 */
proto.taxonomy.model.core.BehaviorGroupSpecification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.BehaviorGroupSpecification;
  return proto.taxonomy.model.core.BehaviorGroupSpecification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.BehaviorGroupSpecification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.BehaviorGroupSpecification}
 */
proto.taxonomy.model.core.BehaviorGroupSpecification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.Artifact;
      reader.readMessage(value,artifact_pb.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    case 2:
      var value = new artifact_pb.ArtifactSymbol;
      reader.readMessage(value,artifact_pb.ArtifactSymbol.deserializeBinaryFromReader);
      msg.addBehaviors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.BehaviorGroupSpecification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.BehaviorGroupSpecification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.BehaviorGroupSpecification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BehaviorGroupSpecification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getBehaviorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      artifact_pb.ArtifactSymbol.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.Artifact artifact = 1;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.core.BehaviorGroupSpecification.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Artifact, 1));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.core.BehaviorGroupSpecification.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.BehaviorGroupSpecification.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.BehaviorGroupSpecification.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated taxonomy.model.artifact.ArtifactSymbol behaviors = 2;
 * @return {!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>}
 */
proto.taxonomy.model.core.BehaviorGroupSpecification.prototype.getBehaviorsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>} */ (
    jspb.Message.getRepeatedWrapperField(this, artifact_pb.ArtifactSymbol, 2));
};


/** @param {!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>} value */
proto.taxonomy.model.core.BehaviorGroupSpecification.prototype.setBehaviorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.ArtifactSymbol=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.core.BehaviorGroupSpecification.prototype.addBehaviors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.taxonomy.model.artifact.ArtifactSymbol, opt_index);
};


proto.taxonomy.model.core.BehaviorGroupSpecification.prototype.clearBehaviorsList = function() {
  this.setBehaviorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.InvocationBinding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.InvocationBinding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.InvocationBinding.displayName = 'proto.taxonomy.model.core.InvocationBinding';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.InvocationBinding.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.InvocationBinding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.InvocationBinding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationBinding.toObject = function(includeInstance, msg) {
  var f, obj = {
    influence: (f = msg.getInfluence()) && proto.taxonomy.model.core.InvocationBinding.Influence.toObject(includeInstance, f),
    invocationStep: (f = msg.getInvocationStep()) && proto.taxonomy.model.core.InvocationBinding.InvocationStep.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.InvocationBinding}
 */
proto.taxonomy.model.core.InvocationBinding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.InvocationBinding;
  return proto.taxonomy.model.core.InvocationBinding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.InvocationBinding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.InvocationBinding}
 */
proto.taxonomy.model.core.InvocationBinding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.core.InvocationBinding.Influence;
      reader.readMessage(value,proto.taxonomy.model.core.InvocationBinding.Influence.deserializeBinaryFromReader);
      msg.setInfluence(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.core.InvocationBinding.InvocationStep;
      reader.readMessage(value,proto.taxonomy.model.core.InvocationBinding.InvocationStep.deserializeBinaryFromReader);
      msg.setInvocationStep(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.InvocationBinding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.InvocationBinding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.InvocationBinding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationBinding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfluence();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.core.InvocationBinding.Influence.serializeBinaryToWriter
    );
  }
  f = message.getInvocationStep();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.core.InvocationBinding.InvocationStep.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.InvocationBinding.Influence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.InvocationBinding.Influence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.InvocationBinding.Influence.displayName = 'proto.taxonomy.model.core.InvocationBinding.Influence';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.InvocationBinding.Influence.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.InvocationBinding.Influence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.InvocationBinding.Influence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationBinding.Influence.toObject = function(includeInstance, msg) {
  var f, obj = {
    influenceType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    influencingId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    influencingInvocationId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    influencedId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    influencedInvocationId: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.InvocationBinding.Influence}
 */
proto.taxonomy.model.core.InvocationBinding.Influence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.InvocationBinding.Influence;
  return proto.taxonomy.model.core.InvocationBinding.Influence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.InvocationBinding.Influence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.InvocationBinding.Influence}
 */
proto.taxonomy.model.core.InvocationBinding.Influence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.core.InfluenceType} */ (reader.readEnum());
      msg.setInfluenceType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfluencingId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfluencingInvocationId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfluencedId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfluencedInvocationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.InvocationBinding.Influence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.InvocationBinding.Influence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.InvocationBinding.Influence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationBinding.Influence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfluenceType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInfluencingId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInfluencingInvocationId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInfluencedId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInfluencedInvocationId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional InfluenceType influence_type = 1;
 * @return {!proto.taxonomy.model.core.InfluenceType}
 */
proto.taxonomy.model.core.InvocationBinding.Influence.prototype.getInfluenceType = function() {
  return /** @type {!proto.taxonomy.model.core.InfluenceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.core.InfluenceType} value */
proto.taxonomy.model.core.InvocationBinding.Influence.prototype.setInfluenceType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string influencing_id = 2;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationBinding.Influence.prototype.getInfluencingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationBinding.Influence.prototype.setInfluencingId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string influencing_invocation_id = 3;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationBinding.Influence.prototype.getInfluencingInvocationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationBinding.Influence.prototype.setInfluencingInvocationId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string influenced_id = 4;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationBinding.Influence.prototype.getInfluencedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationBinding.Influence.prototype.setInfluencedId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string influenced_invocation_id = 5;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationBinding.Influence.prototype.getInfluencedInvocationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationBinding.Influence.prototype.setInfluencedInvocationId = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.InvocationBinding.InvocationStep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.InvocationBinding.InvocationStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.InvocationBinding.InvocationStep.displayName = 'proto.taxonomy.model.core.InvocationBinding.InvocationStep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.InvocationBinding.InvocationStep.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.InvocationBinding.InvocationStep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.InvocationBinding.InvocationStep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationBinding.InvocationStep.toObject = function(includeInstance, msg) {
  var f, obj = {
    invocation: (f = msg.getInvocation()) && proto.taxonomy.model.core.Invocation.toObject(includeInstance, f),
    nextInvocation: (f = msg.getNextInvocation()) && proto.taxonomy.model.core.InvocationBinding.InvocationStep.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.InvocationBinding.InvocationStep}
 */
proto.taxonomy.model.core.InvocationBinding.InvocationStep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.InvocationBinding.InvocationStep;
  return proto.taxonomy.model.core.InvocationBinding.InvocationStep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.InvocationBinding.InvocationStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.InvocationBinding.InvocationStep}
 */
proto.taxonomy.model.core.InvocationBinding.InvocationStep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.core.Invocation;
      reader.readMessage(value,proto.taxonomy.model.core.Invocation.deserializeBinaryFromReader);
      msg.setInvocation(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.core.InvocationBinding.InvocationStep;
      reader.readMessage(value,proto.taxonomy.model.core.InvocationBinding.InvocationStep.deserializeBinaryFromReader);
      msg.setNextInvocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.InvocationBinding.InvocationStep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.InvocationBinding.InvocationStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.InvocationBinding.InvocationStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationBinding.InvocationStep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.core.Invocation.serializeBinaryToWriter
    );
  }
  f = message.getNextInvocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.core.InvocationBinding.InvocationStep.serializeBinaryToWriter
    );
  }
};


/**
 * optional Invocation invocation = 1;
 * @return {?proto.taxonomy.model.core.Invocation}
 */
proto.taxonomy.model.core.InvocationBinding.InvocationStep.prototype.getInvocation = function() {
  return /** @type{?proto.taxonomy.model.core.Invocation} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.Invocation, 1));
};


/** @param {?proto.taxonomy.model.core.Invocation|undefined} value */
proto.taxonomy.model.core.InvocationBinding.InvocationStep.prototype.setInvocation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.InvocationBinding.InvocationStep.prototype.clearInvocation = function() {
  this.setInvocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.InvocationBinding.InvocationStep.prototype.hasInvocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InvocationStep next_invocation = 2;
 * @return {?proto.taxonomy.model.core.InvocationBinding.InvocationStep}
 */
proto.taxonomy.model.core.InvocationBinding.InvocationStep.prototype.getNextInvocation = function() {
  return /** @type{?proto.taxonomy.model.core.InvocationBinding.InvocationStep} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.InvocationBinding.InvocationStep, 2));
};


/** @param {?proto.taxonomy.model.core.InvocationBinding.InvocationStep|undefined} value */
proto.taxonomy.model.core.InvocationBinding.InvocationStep.prototype.setNextInvocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.core.InvocationBinding.InvocationStep.prototype.clearNextInvocation = function() {
  this.setNextInvocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.InvocationBinding.InvocationStep.prototype.hasNextInvocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Influence influence = 1;
 * @return {?proto.taxonomy.model.core.InvocationBinding.Influence}
 */
proto.taxonomy.model.core.InvocationBinding.prototype.getInfluence = function() {
  return /** @type{?proto.taxonomy.model.core.InvocationBinding.Influence} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.InvocationBinding.Influence, 1));
};


/** @param {?proto.taxonomy.model.core.InvocationBinding.Influence|undefined} value */
proto.taxonomy.model.core.InvocationBinding.prototype.setInfluence = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.InvocationBinding.prototype.clearInfluence = function() {
  this.setInfluence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.InvocationBinding.prototype.hasInfluence = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InvocationStep invocation_step = 2;
 * @return {?proto.taxonomy.model.core.InvocationBinding.InvocationStep}
 */
proto.taxonomy.model.core.InvocationBinding.prototype.getInvocationStep = function() {
  return /** @type{?proto.taxonomy.model.core.InvocationBinding.InvocationStep} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.InvocationBinding.InvocationStep, 2));
};


/** @param {?proto.taxonomy.model.core.InvocationBinding.InvocationStep|undefined} value */
proto.taxonomy.model.core.InvocationBinding.prototype.setInvocationStep = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.core.InvocationBinding.prototype.clearInvocationStep = function() {
  this.setInvocationStep(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.InvocationBinding.prototype.hasInvocationStep = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TokenBase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.TokenBase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.TokenBase.displayName = 'proto.taxonomy.model.core.TokenBase';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TokenBase.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TokenBase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TokenBase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenBase.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: (f = msg.getBase()) && proto.taxonomy.model.core.Base.toObject(includeInstance, f),
    values: (f = msg.getValues()) && proto.taxonomy.model.core.BaseReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TokenBase}
 */
proto.taxonomy.model.core.TokenBase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TokenBase;
  return proto.taxonomy.model.core.TokenBase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TokenBase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TokenBase}
 */
proto.taxonomy.model.core.TokenBase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.core.Base;
      reader.readMessage(value,proto.taxonomy.model.core.Base.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.core.BaseReference;
      reader.readMessage(value,proto.taxonomy.model.core.BaseReference.deserializeBinaryFromReader);
      msg.setValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TokenBase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TokenBase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TokenBase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenBase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.core.Base.serializeBinaryToWriter
    );
  }
  f = message.getValues();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.core.BaseReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional Base base = 1;
 * @return {?proto.taxonomy.model.core.Base}
 */
proto.taxonomy.model.core.TokenBase.prototype.getBase = function() {
  return /** @type{?proto.taxonomy.model.core.Base} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.Base, 1));
};


/** @param {?proto.taxonomy.model.core.Base|undefined} value */
proto.taxonomy.model.core.TokenBase.prototype.setBase = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.TokenBase.prototype.clearBase = function() {
  this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TokenBase.prototype.hasBase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BaseReference values = 2;
 * @return {?proto.taxonomy.model.core.BaseReference}
 */
proto.taxonomy.model.core.TokenBase.prototype.getValues = function() {
  return /** @type{?proto.taxonomy.model.core.BaseReference} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.BaseReference, 2));
};


/** @param {?proto.taxonomy.model.core.BaseReference|undefined} value */
proto.taxonomy.model.core.TokenBase.prototype.setValues = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.core.TokenBase.prototype.clearValues = function() {
  this.setValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TokenBase.prototype.hasValues = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TokenBehavior = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.TokenBehavior, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.TokenBehavior.displayName = 'proto.taxonomy.model.core.TokenBehavior';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TokenBehavior.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TokenBehavior.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TokenBehavior} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenBehavior.toObject = function(includeInstance, msg) {
  var f, obj = {
    behavior: (f = msg.getBehavior()) && proto.taxonomy.model.core.Behavior.toObject(includeInstance, f),
    values: (f = msg.getValues()) && proto.taxonomy.model.core.BehaviorReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TokenBehavior}
 */
proto.taxonomy.model.core.TokenBehavior.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TokenBehavior;
  return proto.taxonomy.model.core.TokenBehavior.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TokenBehavior} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TokenBehavior}
 */
proto.taxonomy.model.core.TokenBehavior.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.core.Behavior;
      reader.readMessage(value,proto.taxonomy.model.core.Behavior.deserializeBinaryFromReader);
      msg.setBehavior(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.core.BehaviorReference;
      reader.readMessage(value,proto.taxonomy.model.core.BehaviorReference.deserializeBinaryFromReader);
      msg.setValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TokenBehavior.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TokenBehavior.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TokenBehavior} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenBehavior.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBehavior();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.core.Behavior.serializeBinaryToWriter
    );
  }
  f = message.getValues();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.core.BehaviorReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional Behavior behavior = 1;
 * @return {?proto.taxonomy.model.core.Behavior}
 */
proto.taxonomy.model.core.TokenBehavior.prototype.getBehavior = function() {
  return /** @type{?proto.taxonomy.model.core.Behavior} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.Behavior, 1));
};


/** @param {?proto.taxonomy.model.core.Behavior|undefined} value */
proto.taxonomy.model.core.TokenBehavior.prototype.setBehavior = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.TokenBehavior.prototype.clearBehavior = function() {
  this.setBehavior(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TokenBehavior.prototype.hasBehavior = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BehaviorReference values = 2;
 * @return {?proto.taxonomy.model.core.BehaviorReference}
 */
proto.taxonomy.model.core.TokenBehavior.prototype.getValues = function() {
  return /** @type{?proto.taxonomy.model.core.BehaviorReference} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.BehaviorReference, 2));
};


/** @param {?proto.taxonomy.model.core.BehaviorReference|undefined} value */
proto.taxonomy.model.core.TokenBehavior.prototype.setValues = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.core.TokenBehavior.prototype.clearValues = function() {
  this.setValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TokenBehavior.prototype.hasValues = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TokenBehaviorGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.TokenBehaviorGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.TokenBehaviorGroup.displayName = 'proto.taxonomy.model.core.TokenBehaviorGroup';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TokenBehaviorGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TokenBehaviorGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TokenBehaviorGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenBehaviorGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    behavior: (f = msg.getBehavior()) && proto.taxonomy.model.core.BehaviorGroup.toObject(includeInstance, f),
    values: (f = msg.getValues()) && proto.taxonomy.model.core.BehaviorGroupReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TokenBehaviorGroup}
 */
proto.taxonomy.model.core.TokenBehaviorGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TokenBehaviorGroup;
  return proto.taxonomy.model.core.TokenBehaviorGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TokenBehaviorGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TokenBehaviorGroup}
 */
proto.taxonomy.model.core.TokenBehaviorGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.core.BehaviorGroup;
      reader.readMessage(value,proto.taxonomy.model.core.BehaviorGroup.deserializeBinaryFromReader);
      msg.setBehavior(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.core.BehaviorGroupReference;
      reader.readMessage(value,proto.taxonomy.model.core.BehaviorGroupReference.deserializeBinaryFromReader);
      msg.setValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TokenBehaviorGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TokenBehaviorGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TokenBehaviorGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenBehaviorGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBehavior();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.core.BehaviorGroup.serializeBinaryToWriter
    );
  }
  f = message.getValues();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.core.BehaviorGroupReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional BehaviorGroup behavior = 1;
 * @return {?proto.taxonomy.model.core.BehaviorGroup}
 */
proto.taxonomy.model.core.TokenBehaviorGroup.prototype.getBehavior = function() {
  return /** @type{?proto.taxonomy.model.core.BehaviorGroup} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.BehaviorGroup, 1));
};


/** @param {?proto.taxonomy.model.core.BehaviorGroup|undefined} value */
proto.taxonomy.model.core.TokenBehaviorGroup.prototype.setBehavior = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.TokenBehaviorGroup.prototype.clearBehavior = function() {
  this.setBehavior(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TokenBehaviorGroup.prototype.hasBehavior = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BehaviorGroupReference values = 2;
 * @return {?proto.taxonomy.model.core.BehaviorGroupReference}
 */
proto.taxonomy.model.core.TokenBehaviorGroup.prototype.getValues = function() {
  return /** @type{?proto.taxonomy.model.core.BehaviorGroupReference} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.BehaviorGroupReference, 2));
};


/** @param {?proto.taxonomy.model.core.BehaviorGroupReference|undefined} value */
proto.taxonomy.model.core.TokenBehaviorGroup.prototype.setValues = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.core.TokenBehaviorGroup.prototype.clearValues = function() {
  this.setValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TokenBehaviorGroup.prototype.hasValues = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TokenPropertySet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.TokenPropertySet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.core.TokenPropertySet.displayName = 'proto.taxonomy.model.core.TokenPropertySet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TokenPropertySet.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TokenPropertySet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TokenPropertySet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenPropertySet.toObject = function(includeInstance, msg) {
  var f, obj = {
    propertySet: (f = msg.getPropertySet()) && proto.taxonomy.model.core.PropertySet.toObject(includeInstance, f),
    values: (f = msg.getValues()) && proto.taxonomy.model.core.PropertySetReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TokenPropertySet}
 */
proto.taxonomy.model.core.TokenPropertySet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TokenPropertySet;
  return proto.taxonomy.model.core.TokenPropertySet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TokenPropertySet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TokenPropertySet}
 */
proto.taxonomy.model.core.TokenPropertySet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.core.PropertySet;
      reader.readMessage(value,proto.taxonomy.model.core.PropertySet.deserializeBinaryFromReader);
      msg.setPropertySet(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.core.PropertySetReference;
      reader.readMessage(value,proto.taxonomy.model.core.PropertySetReference.deserializeBinaryFromReader);
      msg.setValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TokenPropertySet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TokenPropertySet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TokenPropertySet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenPropertySet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropertySet();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.core.PropertySet.serializeBinaryToWriter
    );
  }
  f = message.getValues();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.core.PropertySetReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional PropertySet property_set = 1;
 * @return {?proto.taxonomy.model.core.PropertySet}
 */
proto.taxonomy.model.core.TokenPropertySet.prototype.getPropertySet = function() {
  return /** @type{?proto.taxonomy.model.core.PropertySet} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.PropertySet, 1));
};


/** @param {?proto.taxonomy.model.core.PropertySet|undefined} value */
proto.taxonomy.model.core.TokenPropertySet.prototype.setPropertySet = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.core.TokenPropertySet.prototype.clearPropertySet = function() {
  this.setPropertySet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TokenPropertySet.prototype.hasPropertySet = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PropertySetReference values = 2;
 * @return {?proto.taxonomy.model.core.PropertySetReference}
 */
proto.taxonomy.model.core.TokenPropertySet.prototype.getValues = function() {
  return /** @type{?proto.taxonomy.model.core.PropertySetReference} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.PropertySetReference, 2));
};


/** @param {?proto.taxonomy.model.core.PropertySetReference|undefined} value */
proto.taxonomy.model.core.TokenPropertySet.prototype.setValues = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.core.TokenPropertySet.prototype.clearValues = function() {
  this.setValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TokenPropertySet.prototype.hasValues = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.taxonomy.model.core.InfluenceType = {
  INTERCEPT: 0,
  OVERRIDE: 1
};

goog.object.extend(exports, proto.taxonomy.model.core);
