/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_pb = require('./core_pb.js');
goog.object.extend(proto, core_pb);
var artifact_pb = require('./artifact_pb.js');
goog.object.extend(proto, artifact_pb);
goog.exportSymbol('proto.taxonomy.model.BranchIdentifier', null, global);
goog.exportSymbol('proto.taxonomy.model.BranchRoot', null, global);
goog.exportSymbol('proto.taxonomy.model.FungibleBranch', null, global);
goog.exportSymbol('proto.taxonomy.model.Hierarchy', null, global);
goog.exportSymbol('proto.taxonomy.model.HybridBranch', null, global);
goog.exportSymbol('proto.taxonomy.model.NonFungibleBranch', null, global);
goog.exportSymbol('proto.taxonomy.model.Taxonomy', null, global);
goog.exportSymbol('proto.taxonomy.model.TaxonomyVersion', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.Taxonomy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.Taxonomy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.Taxonomy.displayName = 'proto.taxonomy.model.Taxonomy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.Taxonomy.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.Taxonomy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.Taxonomy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.Taxonomy.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = msg.getVersion()) && proto.taxonomy.model.TaxonomyVersion.toObject(includeInstance, f),
    baseTokenTypesMap: (f = msg.getBaseTokenTypesMap()) ? f.toObject(includeInstance, proto.taxonomy.model.core.Base.toObject) : [],
    behaviorsMap: (f = msg.getBehaviorsMap()) ? f.toObject(includeInstance, proto.taxonomy.model.core.Behavior.toObject) : [],
    behaviorGroupsMap: (f = msg.getBehaviorGroupsMap()) ? f.toObject(includeInstance, proto.taxonomy.model.core.BehaviorGroup.toObject) : [],
    propertySetsMap: (f = msg.getPropertySetsMap()) ? f.toObject(includeInstance, proto.taxonomy.model.core.PropertySet.toObject) : [],
    templateFormulasMap: (f = msg.getTemplateFormulasMap()) ? f.toObject(includeInstance, proto.taxonomy.model.core.TemplateFormula.toObject) : [],
    templateDefinitionsMap: (f = msg.getTemplateDefinitionsMap()) ? f.toObject(includeInstance, proto.taxonomy.model.core.TemplateDefinition.toObject) : [],
    tokenTemplateHierarchy: (f = msg.getTokenTemplateHierarchy()) && proto.taxonomy.model.Hierarchy.toObject(includeInstance, f),
    formulaGrammar: (f = msg.getFormulaGrammar()) && artifact_pb.FormulaGrammar.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.Taxonomy}
 */
proto.taxonomy.model.Taxonomy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.Taxonomy;
  return proto.taxonomy.model.Taxonomy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.Taxonomy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.Taxonomy}
 */
proto.taxonomy.model.Taxonomy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.TaxonomyVersion;
      reader.readMessage(value,proto.taxonomy.model.TaxonomyVersion.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 2:
      var value = msg.getBaseTokenTypesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.taxonomy.model.core.Base.deserializeBinaryFromReader, "");
         });
      break;
    case 3:
      var value = msg.getBehaviorsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.taxonomy.model.core.Behavior.deserializeBinaryFromReader, "");
         });
      break;
    case 4:
      var value = msg.getBehaviorGroupsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.taxonomy.model.core.BehaviorGroup.deserializeBinaryFromReader, "");
         });
      break;
    case 5:
      var value = msg.getPropertySetsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.taxonomy.model.core.PropertySet.deserializeBinaryFromReader, "");
         });
      break;
    case 6:
      var value = msg.getTemplateFormulasMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.taxonomy.model.core.TemplateFormula.deserializeBinaryFromReader, "");
         });
      break;
    case 7:
      var value = msg.getTemplateDefinitionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.taxonomy.model.core.TemplateDefinition.deserializeBinaryFromReader, "");
         });
      break;
    case 8:
      var value = new proto.taxonomy.model.Hierarchy;
      reader.readMessage(value,proto.taxonomy.model.Hierarchy.deserializeBinaryFromReader);
      msg.setTokenTemplateHierarchy(value);
      break;
    case 9:
      var value = new artifact_pb.FormulaGrammar;
      reader.readMessage(value,artifact_pb.FormulaGrammar.deserializeBinaryFromReader);
      msg.setFormulaGrammar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.Taxonomy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.Taxonomy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.Taxonomy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.Taxonomy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.TaxonomyVersion.serializeBinaryToWriter
    );
  }
  f = message.getBaseTokenTypesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.taxonomy.model.core.Base.serializeBinaryToWriter);
  }
  f = message.getBehaviorsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.taxonomy.model.core.Behavior.serializeBinaryToWriter);
  }
  f = message.getBehaviorGroupsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.taxonomy.model.core.BehaviorGroup.serializeBinaryToWriter);
  }
  f = message.getPropertySetsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.taxonomy.model.core.PropertySet.serializeBinaryToWriter);
  }
  f = message.getTemplateFormulasMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.taxonomy.model.core.TemplateFormula.serializeBinaryToWriter);
  }
  f = message.getTemplateDefinitionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.taxonomy.model.core.TemplateDefinition.serializeBinaryToWriter);
  }
  f = message.getTokenTemplateHierarchy();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.taxonomy.model.Hierarchy.serializeBinaryToWriter
    );
  }
  f = message.getFormulaGrammar();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      artifact_pb.FormulaGrammar.serializeBinaryToWriter
    );
  }
};


/**
 * optional TaxonomyVersion version = 1;
 * @return {?proto.taxonomy.model.TaxonomyVersion}
 */
proto.taxonomy.model.Taxonomy.prototype.getVersion = function() {
  return /** @type{?proto.taxonomy.model.TaxonomyVersion} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.TaxonomyVersion, 1));
};


/** @param {?proto.taxonomy.model.TaxonomyVersion|undefined} value */
proto.taxonomy.model.Taxonomy.prototype.setVersion = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.Taxonomy.prototype.clearVersion = function() {
  this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.Taxonomy.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, core.Base> base_token_types = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.taxonomy.model.core.Base>}
 */
proto.taxonomy.model.Taxonomy.prototype.getBaseTokenTypesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.taxonomy.model.core.Base>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.taxonomy.model.core.Base));
};


proto.taxonomy.model.Taxonomy.prototype.clearBaseTokenTypesMap = function() {
  this.getBaseTokenTypesMap().clear();
};


/**
 * map<string, core.Behavior> behaviors = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.taxonomy.model.core.Behavior>}
 */
proto.taxonomy.model.Taxonomy.prototype.getBehaviorsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.taxonomy.model.core.Behavior>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.taxonomy.model.core.Behavior));
};


proto.taxonomy.model.Taxonomy.prototype.clearBehaviorsMap = function() {
  this.getBehaviorsMap().clear();
};


/**
 * map<string, core.BehaviorGroup> behavior_groups = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.taxonomy.model.core.BehaviorGroup>}
 */
proto.taxonomy.model.Taxonomy.prototype.getBehaviorGroupsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.taxonomy.model.core.BehaviorGroup>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.taxonomy.model.core.BehaviorGroup));
};


proto.taxonomy.model.Taxonomy.prototype.clearBehaviorGroupsMap = function() {
  this.getBehaviorGroupsMap().clear();
};


/**
 * map<string, core.PropertySet> property_sets = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.taxonomy.model.core.PropertySet>}
 */
proto.taxonomy.model.Taxonomy.prototype.getPropertySetsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.taxonomy.model.core.PropertySet>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.taxonomy.model.core.PropertySet));
};


proto.taxonomy.model.Taxonomy.prototype.clearPropertySetsMap = function() {
  this.getPropertySetsMap().clear();
};


/**
 * map<string, core.TemplateFormula> template_formulas = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.taxonomy.model.core.TemplateFormula>}
 */
proto.taxonomy.model.Taxonomy.prototype.getTemplateFormulasMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.taxonomy.model.core.TemplateFormula>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.taxonomy.model.core.TemplateFormula));
};


proto.taxonomy.model.Taxonomy.prototype.clearTemplateFormulasMap = function() {
  this.getTemplateFormulasMap().clear();
};


/**
 * map<string, core.TemplateDefinition> template_definitions = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.taxonomy.model.core.TemplateDefinition>}
 */
proto.taxonomy.model.Taxonomy.prototype.getTemplateDefinitionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.taxonomy.model.core.TemplateDefinition>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.taxonomy.model.core.TemplateDefinition));
};


proto.taxonomy.model.Taxonomy.prototype.clearTemplateDefinitionsMap = function() {
  this.getTemplateDefinitionsMap().clear();
};


/**
 * optional Hierarchy token_template_hierarchy = 8;
 * @return {?proto.taxonomy.model.Hierarchy}
 */
proto.taxonomy.model.Taxonomy.prototype.getTokenTemplateHierarchy = function() {
  return /** @type{?proto.taxonomy.model.Hierarchy} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.Hierarchy, 8));
};


/** @param {?proto.taxonomy.model.Hierarchy|undefined} value */
proto.taxonomy.model.Taxonomy.prototype.setTokenTemplateHierarchy = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.taxonomy.model.Taxonomy.prototype.clearTokenTemplateHierarchy = function() {
  this.setTokenTemplateHierarchy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.Taxonomy.prototype.hasTokenTemplateHierarchy = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional artifact.FormulaGrammar formula_grammar = 9;
 * @return {?proto.taxonomy.model.artifact.FormulaGrammar}
 */
proto.taxonomy.model.Taxonomy.prototype.getFormulaGrammar = function() {
  return /** @type{?proto.taxonomy.model.artifact.FormulaGrammar} */ (
    jspb.Message.getWrapperField(this, artifact_pb.FormulaGrammar, 9));
};


/** @param {?proto.taxonomy.model.artifact.FormulaGrammar|undefined} value */
proto.taxonomy.model.Taxonomy.prototype.setFormulaGrammar = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.taxonomy.model.Taxonomy.prototype.clearFormulaGrammar = function() {
  this.setFormulaGrammar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.Taxonomy.prototype.hasFormulaGrammar = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.TaxonomyVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.TaxonomyVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.TaxonomyVersion.displayName = 'proto.taxonomy.model.TaxonomyVersion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.TaxonomyVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.TaxonomyVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.TaxonomyVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.TaxonomyVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stateHash: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.TaxonomyVersion}
 */
proto.taxonomy.model.TaxonomyVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.TaxonomyVersion;
  return proto.taxonomy.model.TaxonomyVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.TaxonomyVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.TaxonomyVersion}
 */
proto.taxonomy.model.TaxonomyVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.TaxonomyVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.TaxonomyVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.TaxonomyVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.TaxonomyVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStateHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.taxonomy.model.TaxonomyVersion.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.TaxonomyVersion.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.taxonomy.model.TaxonomyVersion.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.TaxonomyVersion.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string state_hash = 3;
 * @return {string}
 */
proto.taxonomy.model.TaxonomyVersion.prototype.getStateHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.TaxonomyVersion.prototype.setStateHash = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.Hierarchy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.Hierarchy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.Hierarchy.displayName = 'proto.taxonomy.model.Hierarchy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.Hierarchy.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.Hierarchy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.Hierarchy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.Hierarchy.toObject = function(includeInstance, msg) {
  var f, obj = {
    fungibles: (f = msg.getFungibles()) && proto.taxonomy.model.FungibleBranch.toObject(includeInstance, f),
    nonFungibles: (f = msg.getNonFungibles()) && proto.taxonomy.model.NonFungibleBranch.toObject(includeInstance, f),
    hybrids: (f = msg.getHybrids()) && proto.taxonomy.model.HybridBranch.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.Hierarchy}
 */
proto.taxonomy.model.Hierarchy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.Hierarchy;
  return proto.taxonomy.model.Hierarchy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.Hierarchy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.Hierarchy}
 */
proto.taxonomy.model.Hierarchy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.FungibleBranch;
      reader.readMessage(value,proto.taxonomy.model.FungibleBranch.deserializeBinaryFromReader);
      msg.setFungibles(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.NonFungibleBranch;
      reader.readMessage(value,proto.taxonomy.model.NonFungibleBranch.deserializeBinaryFromReader);
      msg.setNonFungibles(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.HybridBranch;
      reader.readMessage(value,proto.taxonomy.model.HybridBranch.deserializeBinaryFromReader);
      msg.setHybrids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.Hierarchy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.Hierarchy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.Hierarchy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.Hierarchy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFungibles();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.FungibleBranch.serializeBinaryToWriter
    );
  }
  f = message.getNonFungibles();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.NonFungibleBranch.serializeBinaryToWriter
    );
  }
  f = message.getHybrids();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.taxonomy.model.HybridBranch.serializeBinaryToWriter
    );
  }
};


/**
 * optional FungibleBranch fungibles = 1;
 * @return {?proto.taxonomy.model.FungibleBranch}
 */
proto.taxonomy.model.Hierarchy.prototype.getFungibles = function() {
  return /** @type{?proto.taxonomy.model.FungibleBranch} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.FungibleBranch, 1));
};


/** @param {?proto.taxonomy.model.FungibleBranch|undefined} value */
proto.taxonomy.model.Hierarchy.prototype.setFungibles = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.Hierarchy.prototype.clearFungibles = function() {
  this.setFungibles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.Hierarchy.prototype.hasFungibles = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NonFungibleBranch non_fungibles = 2;
 * @return {?proto.taxonomy.model.NonFungibleBranch}
 */
proto.taxonomy.model.Hierarchy.prototype.getNonFungibles = function() {
  return /** @type{?proto.taxonomy.model.NonFungibleBranch} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.NonFungibleBranch, 2));
};


/** @param {?proto.taxonomy.model.NonFungibleBranch|undefined} value */
proto.taxonomy.model.Hierarchy.prototype.setNonFungibles = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.Hierarchy.prototype.clearNonFungibles = function() {
  this.setNonFungibles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.Hierarchy.prototype.hasNonFungibles = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional HybridBranch hybrids = 3;
 * @return {?proto.taxonomy.model.HybridBranch}
 */
proto.taxonomy.model.Hierarchy.prototype.getHybrids = function() {
  return /** @type{?proto.taxonomy.model.HybridBranch} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.HybridBranch, 3));
};


/** @param {?proto.taxonomy.model.HybridBranch|undefined} value */
proto.taxonomy.model.Hierarchy.prototype.setHybrids = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.taxonomy.model.Hierarchy.prototype.clearHybrids = function() {
  this.setHybrids(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.Hierarchy.prototype.hasHybrids = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.HybridBranch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.HybridBranch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.HybridBranch.displayName = 'proto.taxonomy.model.HybridBranch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.HybridBranch.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.HybridBranch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.HybridBranch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.HybridBranch.toObject = function(includeInstance, msg) {
  var f, obj = {
    fungible: (f = msg.getFungible()) && proto.taxonomy.model.FungibleBranch.toObject(includeInstance, f),
    nonFungible: (f = msg.getNonFungible()) && proto.taxonomy.model.NonFungibleBranch.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.HybridBranch}
 */
proto.taxonomy.model.HybridBranch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.HybridBranch;
  return proto.taxonomy.model.HybridBranch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.HybridBranch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.HybridBranch}
 */
proto.taxonomy.model.HybridBranch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.FungibleBranch;
      reader.readMessage(value,proto.taxonomy.model.FungibleBranch.deserializeBinaryFromReader);
      msg.setFungible(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.NonFungibleBranch;
      reader.readMessage(value,proto.taxonomy.model.NonFungibleBranch.deserializeBinaryFromReader);
      msg.setNonFungible(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.HybridBranch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.HybridBranch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.HybridBranch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.HybridBranch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFungible();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.FungibleBranch.serializeBinaryToWriter
    );
  }
  f = message.getNonFungible();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.NonFungibleBranch.serializeBinaryToWriter
    );
  }
};


/**
 * optional FungibleBranch fungible = 1;
 * @return {?proto.taxonomy.model.FungibleBranch}
 */
proto.taxonomy.model.HybridBranch.prototype.getFungible = function() {
  return /** @type{?proto.taxonomy.model.FungibleBranch} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.FungibleBranch, 1));
};


/** @param {?proto.taxonomy.model.FungibleBranch|undefined} value */
proto.taxonomy.model.HybridBranch.prototype.setFungible = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.HybridBranch.prototype.clearFungible = function() {
  this.setFungible(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.HybridBranch.prototype.hasFungible = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NonFungibleBranch non_fungible = 2;
 * @return {?proto.taxonomy.model.NonFungibleBranch}
 */
proto.taxonomy.model.HybridBranch.prototype.getNonFungible = function() {
  return /** @type{?proto.taxonomy.model.NonFungibleBranch} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.NonFungibleBranch, 2));
};


/** @param {?proto.taxonomy.model.NonFungibleBranch|undefined} value */
proto.taxonomy.model.HybridBranch.prototype.setNonFungible = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.HybridBranch.prototype.clearNonFungible = function() {
  this.setNonFungible(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.HybridBranch.prototype.hasNonFungible = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.FungibleBranch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.FungibleBranch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.FungibleBranch.displayName = 'proto.taxonomy.model.FungibleBranch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.FungibleBranch.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.FungibleBranch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.FungibleBranch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.FungibleBranch.toObject = function(includeInstance, msg) {
  var f, obj = {
    fractional: (f = msg.getFractional()) && proto.taxonomy.model.BranchRoot.toObject(includeInstance, f),
    whole: (f = msg.getWhole()) && proto.taxonomy.model.BranchRoot.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.FungibleBranch}
 */
proto.taxonomy.model.FungibleBranch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.FungibleBranch;
  return proto.taxonomy.model.FungibleBranch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.FungibleBranch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.FungibleBranch}
 */
proto.taxonomy.model.FungibleBranch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.BranchRoot;
      reader.readMessage(value,proto.taxonomy.model.BranchRoot.deserializeBinaryFromReader);
      msg.setFractional(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.BranchRoot;
      reader.readMessage(value,proto.taxonomy.model.BranchRoot.deserializeBinaryFromReader);
      msg.setWhole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.FungibleBranch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.FungibleBranch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.FungibleBranch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.FungibleBranch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFractional();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.BranchRoot.serializeBinaryToWriter
    );
  }
  f = message.getWhole();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.BranchRoot.serializeBinaryToWriter
    );
  }
};


/**
 * optional BranchRoot fractional = 1;
 * @return {?proto.taxonomy.model.BranchRoot}
 */
proto.taxonomy.model.FungibleBranch.prototype.getFractional = function() {
  return /** @type{?proto.taxonomy.model.BranchRoot} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.BranchRoot, 1));
};


/** @param {?proto.taxonomy.model.BranchRoot|undefined} value */
proto.taxonomy.model.FungibleBranch.prototype.setFractional = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.FungibleBranch.prototype.clearFractional = function() {
  this.setFractional(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.FungibleBranch.prototype.hasFractional = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BranchRoot whole = 2;
 * @return {?proto.taxonomy.model.BranchRoot}
 */
proto.taxonomy.model.FungibleBranch.prototype.getWhole = function() {
  return /** @type{?proto.taxonomy.model.BranchRoot} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.BranchRoot, 2));
};


/** @param {?proto.taxonomy.model.BranchRoot|undefined} value */
proto.taxonomy.model.FungibleBranch.prototype.setWhole = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.FungibleBranch.prototype.clearWhole = function() {
  this.setWhole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.FungibleBranch.prototype.hasWhole = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.NonFungibleBranch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.NonFungibleBranch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.NonFungibleBranch.displayName = 'proto.taxonomy.model.NonFungibleBranch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.NonFungibleBranch.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.NonFungibleBranch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.NonFungibleBranch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.NonFungibleBranch.toObject = function(includeInstance, msg) {
  var f, obj = {
    fractional: (f = msg.getFractional()) && proto.taxonomy.model.BranchRoot.toObject(includeInstance, f),
    whole: (f = msg.getWhole()) && proto.taxonomy.model.BranchRoot.toObject(includeInstance, f),
    singleton: (f = msg.getSingleton()) && proto.taxonomy.model.BranchRoot.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.NonFungibleBranch}
 */
proto.taxonomy.model.NonFungibleBranch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.NonFungibleBranch;
  return proto.taxonomy.model.NonFungibleBranch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.NonFungibleBranch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.NonFungibleBranch}
 */
proto.taxonomy.model.NonFungibleBranch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.BranchRoot;
      reader.readMessage(value,proto.taxonomy.model.BranchRoot.deserializeBinaryFromReader);
      msg.setFractional(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.BranchRoot;
      reader.readMessage(value,proto.taxonomy.model.BranchRoot.deserializeBinaryFromReader);
      msg.setWhole(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.BranchRoot;
      reader.readMessage(value,proto.taxonomy.model.BranchRoot.deserializeBinaryFromReader);
      msg.setSingleton(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.NonFungibleBranch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.NonFungibleBranch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.NonFungibleBranch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.NonFungibleBranch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFractional();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.BranchRoot.serializeBinaryToWriter
    );
  }
  f = message.getWhole();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.BranchRoot.serializeBinaryToWriter
    );
  }
  f = message.getSingleton();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.taxonomy.model.BranchRoot.serializeBinaryToWriter
    );
  }
};


/**
 * optional BranchRoot fractional = 1;
 * @return {?proto.taxonomy.model.BranchRoot}
 */
proto.taxonomy.model.NonFungibleBranch.prototype.getFractional = function() {
  return /** @type{?proto.taxonomy.model.BranchRoot} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.BranchRoot, 1));
};


/** @param {?proto.taxonomy.model.BranchRoot|undefined} value */
proto.taxonomy.model.NonFungibleBranch.prototype.setFractional = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.NonFungibleBranch.prototype.clearFractional = function() {
  this.setFractional(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.NonFungibleBranch.prototype.hasFractional = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BranchRoot whole = 2;
 * @return {?proto.taxonomy.model.BranchRoot}
 */
proto.taxonomy.model.NonFungibleBranch.prototype.getWhole = function() {
  return /** @type{?proto.taxonomy.model.BranchRoot} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.BranchRoot, 2));
};


/** @param {?proto.taxonomy.model.BranchRoot|undefined} value */
proto.taxonomy.model.NonFungibleBranch.prototype.setWhole = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.NonFungibleBranch.prototype.clearWhole = function() {
  this.setWhole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.NonFungibleBranch.prototype.hasWhole = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BranchRoot singleton = 3;
 * @return {?proto.taxonomy.model.BranchRoot}
 */
proto.taxonomy.model.NonFungibleBranch.prototype.getSingleton = function() {
  return /** @type{?proto.taxonomy.model.BranchRoot} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.BranchRoot, 3));
};


/** @param {?proto.taxonomy.model.BranchRoot|undefined} value */
proto.taxonomy.model.NonFungibleBranch.prototype.setSingleton = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.taxonomy.model.NonFungibleBranch.prototype.clearSingleton = function() {
  this.setSingleton(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.NonFungibleBranch.prototype.hasSingleton = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.BranchIdentifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.BranchIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.BranchIdentifier.displayName = 'proto.taxonomy.model.BranchIdentifier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.BranchIdentifier.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.BranchIdentifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.BranchIdentifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.BranchIdentifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    classification: (f = msg.getClassification()) && artifact_pb.Classification.toObject(includeInstance, f),
    formulaId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.BranchIdentifier}
 */
proto.taxonomy.model.BranchIdentifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.BranchIdentifier;
  return proto.taxonomy.model.BranchIdentifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.BranchIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.BranchIdentifier}
 */
proto.taxonomy.model.BranchIdentifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.Classification;
      reader.readMessage(value,artifact_pb.Classification.deserializeBinaryFromReader);
      msg.setClassification(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormulaId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.BranchIdentifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.BranchIdentifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.BranchIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.BranchIdentifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassification();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.Classification.serializeBinaryToWriter
    );
  }
  f = message.getFormulaId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional artifact.Classification classification = 1;
 * @return {?proto.taxonomy.model.artifact.Classification}
 */
proto.taxonomy.model.BranchIdentifier.prototype.getClassification = function() {
  return /** @type{?proto.taxonomy.model.artifact.Classification} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Classification, 1));
};


/** @param {?proto.taxonomy.model.artifact.Classification|undefined} value */
proto.taxonomy.model.BranchIdentifier.prototype.setClassification = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.BranchIdentifier.prototype.clearClassification = function() {
  this.setClassification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.BranchIdentifier.prototype.hasClassification = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string formula_id = 2;
 * @return {string}
 */
proto.taxonomy.model.BranchIdentifier.prototype.getFormulaId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.BranchIdentifier.prototype.setFormulaId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.BranchRoot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.BranchRoot.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.BranchRoot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.BranchRoot.displayName = 'proto.taxonomy.model.BranchRoot';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.BranchRoot.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.BranchRoot.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.BranchRoot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.BranchRoot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.BranchRoot.toObject = function(includeInstance, msg) {
  var f, obj = {
    branchIdentifier: (f = msg.getBranchIdentifier()) && proto.taxonomy.model.BranchIdentifier.toObject(includeInstance, f),
    parentFormulaId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    branchFormula: (f = msg.getBranchFormula()) && core_pb.TemplateFormula.toObject(includeInstance, f),
    templates: (f = msg.getTemplates()) && core_pb.TokenTemplates.toObject(includeInstance, f),
    branchesList: jspb.Message.toObjectList(msg.getBranchesList(),
    proto.taxonomy.model.BranchRoot.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.BranchRoot}
 */
proto.taxonomy.model.BranchRoot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.BranchRoot;
  return proto.taxonomy.model.BranchRoot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.BranchRoot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.BranchRoot}
 */
proto.taxonomy.model.BranchRoot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.BranchIdentifier;
      reader.readMessage(value,proto.taxonomy.model.BranchIdentifier.deserializeBinaryFromReader);
      msg.setBranchIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentFormulaId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new core_pb.TemplateFormula;
      reader.readMessage(value,core_pb.TemplateFormula.deserializeBinaryFromReader);
      msg.setBranchFormula(value);
      break;
    case 5:
      var value = new core_pb.TokenTemplates;
      reader.readMessage(value,core_pb.TokenTemplates.deserializeBinaryFromReader);
      msg.setTemplates(value);
      break;
    case 6:
      var value = new proto.taxonomy.model.BranchRoot;
      reader.readMessage(value,proto.taxonomy.model.BranchRoot.deserializeBinaryFromReader);
      msg.addBranches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.BranchRoot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.BranchRoot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.BranchRoot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.BranchRoot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBranchIdentifier();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.BranchIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getParentFormulaId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBranchFormula();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      core_pb.TemplateFormula.serializeBinaryToWriter
    );
  }
  f = message.getTemplates();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      core_pb.TokenTemplates.serializeBinaryToWriter
    );
  }
  f = message.getBranchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.taxonomy.model.BranchRoot.serializeBinaryToWriter
    );
  }
};


/**
 * optional BranchIdentifier branch_identifier = 1;
 * @return {?proto.taxonomy.model.BranchIdentifier}
 */
proto.taxonomy.model.BranchRoot.prototype.getBranchIdentifier = function() {
  return /** @type{?proto.taxonomy.model.BranchIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.BranchIdentifier, 1));
};


/** @param {?proto.taxonomy.model.BranchIdentifier|undefined} value */
proto.taxonomy.model.BranchRoot.prototype.setBranchIdentifier = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.BranchRoot.prototype.clearBranchIdentifier = function() {
  this.setBranchIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.BranchRoot.prototype.hasBranchIdentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string parent_formula_id = 2;
 * @return {string}
 */
proto.taxonomy.model.BranchRoot.prototype.getParentFormulaId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.BranchRoot.prototype.setParentFormulaId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.taxonomy.model.BranchRoot.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.BranchRoot.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional core.TemplateFormula branch_formula = 4;
 * @return {?proto.taxonomy.model.core.TemplateFormula}
 */
proto.taxonomy.model.BranchRoot.prototype.getBranchFormula = function() {
  return /** @type{?proto.taxonomy.model.core.TemplateFormula} */ (
    jspb.Message.getWrapperField(this, core_pb.TemplateFormula, 4));
};


/** @param {?proto.taxonomy.model.core.TemplateFormula|undefined} value */
proto.taxonomy.model.BranchRoot.prototype.setBranchFormula = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.taxonomy.model.BranchRoot.prototype.clearBranchFormula = function() {
  this.setBranchFormula(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.BranchRoot.prototype.hasBranchFormula = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional core.TokenTemplates templates = 5;
 * @return {?proto.taxonomy.model.core.TokenTemplates}
 */
proto.taxonomy.model.BranchRoot.prototype.getTemplates = function() {
  return /** @type{?proto.taxonomy.model.core.TokenTemplates} */ (
    jspb.Message.getWrapperField(this, core_pb.TokenTemplates, 5));
};


/** @param {?proto.taxonomy.model.core.TokenTemplates|undefined} value */
proto.taxonomy.model.BranchRoot.prototype.setTemplates = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.taxonomy.model.BranchRoot.prototype.clearTemplates = function() {
  this.setTemplates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.BranchRoot.prototype.hasTemplates = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated BranchRoot branches = 6;
 * @return {!Array<!proto.taxonomy.model.BranchRoot>}
 */
proto.taxonomy.model.BranchRoot.prototype.getBranchesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.BranchRoot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.BranchRoot, 6));
};


/** @param {!Array<!proto.taxonomy.model.BranchRoot>} value */
proto.taxonomy.model.BranchRoot.prototype.setBranchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.taxonomy.model.BranchRoot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.BranchRoot}
 */
proto.taxonomy.model.BranchRoot.prototype.addBranches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.taxonomy.model.BranchRoot, opt_index);
};


proto.taxonomy.model.BranchRoot.prototype.clearBranchesList = function() {
  this.setBranchesList([]);
};


goog.object.extend(exports, proto.taxonomy.model);
