/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.taxonomy.model.artifact.Artifact', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ArtifactAnalogy', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ArtifactContent', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ArtifactDefinition', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ArtifactFile', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ArtifactReference', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ArtifactReferenceValues', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ArtifactSymbol', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ArtifactType', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.BehaviorList', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.Classification', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.CommitUpdatesRequest', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.CommitUpdatesResponse', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ConfigurationRequest', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.Contributor', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.DeleteArtifactRequest', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.DeleteArtifactResponse', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.FormulaGrammar', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.HybridTokenGrammar', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.Identifier', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.InitializeNewArtifactRequest', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.InitializeNewArtifactResponse', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.IssuePullRequest', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.IssuePullResponse', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.MapReference', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.MapResourceReference', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.MappingType', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.Maps', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.NewArtifactRequest', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.NewArtifactResponse', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.NewTemplateDefinition', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.PropertySetList', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.PropertySetListItem', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.QueryOptions', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.QueryResult', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.RepresentationType', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ServiceConfiguration', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.SingleTokenGrammar', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.Supply', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.SymbolDependency', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.SymbolInfluence', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.TargetPlatform', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.TemplateType', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.TokenTemplateId', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.TokenType', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.TokenUnit', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.UpdateArtifactRequest', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.UpdateArtifactResponse', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ValueType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.Classification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.Classification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.Classification.displayName = 'proto.taxonomy.model.artifact.Classification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.Classification.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.Classification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.Classification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.Classification.toObject = function(includeInstance, msg) {
  var f, obj = {
    templateType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tokenType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tokenUnit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    representationType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    valueType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    supply: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.Classification}
 */
proto.taxonomy.model.artifact.Classification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.Classification;
  return proto.taxonomy.model.artifact.Classification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.Classification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.Classification}
 */
proto.taxonomy.model.artifact.Classification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.TemplateType} */ (reader.readEnum());
      msg.setTemplateType(value);
      break;
    case 2:
      var value = /** @type {!proto.taxonomy.model.artifact.TokenType} */ (reader.readEnum());
      msg.setTokenType(value);
      break;
    case 3:
      var value = /** @type {!proto.taxonomy.model.artifact.TokenUnit} */ (reader.readEnum());
      msg.setTokenUnit(value);
      break;
    case 4:
      var value = /** @type {!proto.taxonomy.model.artifact.RepresentationType} */ (reader.readEnum());
      msg.setRepresentationType(value);
      break;
    case 5:
      var value = /** @type {!proto.taxonomy.model.artifact.ValueType} */ (reader.readEnum());
      msg.setValueType(value);
      break;
    case 6:
      var value = /** @type {!proto.taxonomy.model.artifact.Supply} */ (reader.readEnum());
      msg.setSupply(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.Classification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.Classification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.Classification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.Classification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemplateType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTokenType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTokenUnit();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRepresentationType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getValueType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getSupply();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional TemplateType template_type = 1;
 * @return {!proto.taxonomy.model.artifact.TemplateType}
 */
proto.taxonomy.model.artifact.Classification.prototype.getTemplateType = function() {
  return /** @type {!proto.taxonomy.model.artifact.TemplateType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.TemplateType} value */
proto.taxonomy.model.artifact.Classification.prototype.setTemplateType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional TokenType token_type = 2;
 * @return {!proto.taxonomy.model.artifact.TokenType}
 */
proto.taxonomy.model.artifact.Classification.prototype.getTokenType = function() {
  return /** @type {!proto.taxonomy.model.artifact.TokenType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.taxonomy.model.artifact.TokenType} value */
proto.taxonomy.model.artifact.Classification.prototype.setTokenType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional TokenUnit token_unit = 3;
 * @return {!proto.taxonomy.model.artifact.TokenUnit}
 */
proto.taxonomy.model.artifact.Classification.prototype.getTokenUnit = function() {
  return /** @type {!proto.taxonomy.model.artifact.TokenUnit} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.taxonomy.model.artifact.TokenUnit} value */
proto.taxonomy.model.artifact.Classification.prototype.setTokenUnit = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional RepresentationType representation_type = 4;
 * @return {!proto.taxonomy.model.artifact.RepresentationType}
 */
proto.taxonomy.model.artifact.Classification.prototype.getRepresentationType = function() {
  return /** @type {!proto.taxonomy.model.artifact.RepresentationType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.taxonomy.model.artifact.RepresentationType} value */
proto.taxonomy.model.artifact.Classification.prototype.setRepresentationType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional ValueType value_type = 5;
 * @return {!proto.taxonomy.model.artifact.ValueType}
 */
proto.taxonomy.model.artifact.Classification.prototype.getValueType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ValueType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.taxonomy.model.artifact.ValueType} value */
proto.taxonomy.model.artifact.Classification.prototype.setValueType = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional Supply supply = 6;
 * @return {!proto.taxonomy.model.artifact.Supply}
 */
proto.taxonomy.model.artifact.Classification.prototype.getSupply = function() {
  return /** @type {!proto.taxonomy.model.artifact.Supply} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.taxonomy.model.artifact.Supply} value */
proto.taxonomy.model.artifact.Classification.prototype.setSupply = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.ArtifactSymbol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.ArtifactSymbol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.ArtifactSymbol.displayName = 'proto.taxonomy.model.artifact.ArtifactSymbol';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.ArtifactSymbol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.ArtifactSymbol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactSymbol.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    visual: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tooling: jspb.Message.getFieldWithDefault(msg, 4, ""),
    version: jspb.Message.getFieldWithDefault(msg, 5, ""),
    templateValidated: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.ArtifactSymbol;
  return proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.ArtifactSymbol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVisual(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTooling(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTemplateValidated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.ArtifactSymbol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.ArtifactSymbol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactSymbol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getVisual();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTooling();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTemplateValidated();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ArtifactType type = 2;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.getType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string visual = 3;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.getVisual = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.setVisual = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tooling = 4;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.getTooling = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.setTooling = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string version = 5;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool template_validated = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.getTemplateValidated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.setTemplateValidated = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.Artifact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.artifact.Artifact.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.artifact.Artifact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.Artifact.displayName = 'proto.taxonomy.model.artifact.Artifact';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.artifact.Artifact.repeatedFields_ = [3,5,6,7,9,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.Artifact.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.Artifact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.Artifact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.Artifact.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifactSymbol: (f = msg.getArtifactSymbol()) && proto.taxonomy.model.artifact.ArtifactSymbol.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    aliasesList: jspb.Message.getRepeatedField(msg, 3),
    artifactDefinition: (f = msg.getArtifactDefinition()) && proto.taxonomy.model.artifact.ArtifactDefinition.toObject(includeInstance, f),
    dependenciesList: jspb.Message.toObjectList(msg.getDependenciesList(),
    proto.taxonomy.model.artifact.SymbolDependency.toObject, includeInstance),
    incompatibleWithSymbolsList: jspb.Message.toObjectList(msg.getIncompatibleWithSymbolsList(),
    proto.taxonomy.model.artifact.ArtifactSymbol.toObject, includeInstance),
    influencedBySymbolsList: jspb.Message.toObjectList(msg.getInfluencedBySymbolsList(),
    proto.taxonomy.model.artifact.SymbolInfluence.toObject, includeInstance),
    controlUri: jspb.Message.getFieldWithDefault(msg, 8, ""),
    artifactFilesList: jspb.Message.toObjectList(msg.getArtifactFilesList(),
    proto.taxonomy.model.artifact.ArtifactFile.toObject, includeInstance),
    maps: (f = msg.getMaps()) && proto.taxonomy.model.artifact.Maps.toObject(includeInstance, f),
    contributorsList: jspb.Message.toObjectList(msg.getContributorsList(),
    proto.taxonomy.model.artifact.Contributor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.artifact.Artifact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.Artifact;
  return proto.taxonomy.model.artifact.Artifact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.Artifact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.artifact.Artifact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.artifact.ArtifactSymbol;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinaryFromReader);
      msg.setArtifactSymbol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAliases(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.artifact.ArtifactDefinition;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactDefinition.deserializeBinaryFromReader);
      msg.setArtifactDefinition(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.artifact.SymbolDependency;
      reader.readMessage(value,proto.taxonomy.model.artifact.SymbolDependency.deserializeBinaryFromReader);
      msg.addDependencies(value);
      break;
    case 6:
      var value = new proto.taxonomy.model.artifact.ArtifactSymbol;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinaryFromReader);
      msg.addIncompatibleWithSymbols(value);
      break;
    case 7:
      var value = new proto.taxonomy.model.artifact.SymbolInfluence;
      reader.readMessage(value,proto.taxonomy.model.artifact.SymbolInfluence.deserializeBinaryFromReader);
      msg.addInfluencedBySymbols(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setControlUri(value);
      break;
    case 9:
      var value = new proto.taxonomy.model.artifact.ArtifactFile;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactFile.deserializeBinaryFromReader);
      msg.addArtifactFiles(value);
      break;
    case 10:
      var value = new proto.taxonomy.model.artifact.Maps;
      reader.readMessage(value,proto.taxonomy.model.artifact.Maps.deserializeBinaryFromReader);
      msg.setMaps(value);
      break;
    case 11:
      var value = new proto.taxonomy.model.artifact.Contributor;
      reader.readMessage(value,proto.taxonomy.model.artifact.Contributor.deserializeBinaryFromReader);
      msg.addContributors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.Artifact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.Artifact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.Artifact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.Artifact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifactSymbol();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.artifact.ArtifactSymbol.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAliasesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getArtifactDefinition();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.taxonomy.model.artifact.ArtifactDefinition.serializeBinaryToWriter
    );
  }
  f = message.getDependenciesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.taxonomy.model.artifact.SymbolDependency.serializeBinaryToWriter
    );
  }
  f = message.getIncompatibleWithSymbolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.taxonomy.model.artifact.ArtifactSymbol.serializeBinaryToWriter
    );
  }
  f = message.getInfluencedBySymbolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.taxonomy.model.artifact.SymbolInfluence.serializeBinaryToWriter
    );
  }
  f = message.getControlUri();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getArtifactFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.taxonomy.model.artifact.ArtifactFile.serializeBinaryToWriter
    );
  }
  f = message.getMaps();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.taxonomy.model.artifact.Maps.serializeBinaryToWriter
    );
  }
  f = message.getContributorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.taxonomy.model.artifact.Contributor.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactSymbol artifact_symbol = 1;
 * @return {?proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getArtifactSymbol = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactSymbol} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.ArtifactSymbol, 1));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactSymbol|undefined} value */
proto.taxonomy.model.artifact.Artifact.prototype.setArtifactSymbol = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.artifact.Artifact.prototype.clearArtifactSymbol = function() {
  this.setArtifactSymbol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.Artifact.prototype.hasArtifactSymbol = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.Artifact.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string aliases = 3;
 * @return {!Array<string>}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getAliasesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.taxonomy.model.artifact.Artifact.prototype.setAliasesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.taxonomy.model.artifact.Artifact.prototype.addAliases = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.taxonomy.model.artifact.Artifact.prototype.clearAliasesList = function() {
  this.setAliasesList([]);
};


/**
 * optional ArtifactDefinition artifact_definition = 4;
 * @return {?proto.taxonomy.model.artifact.ArtifactDefinition}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getArtifactDefinition = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactDefinition} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.ArtifactDefinition, 4));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactDefinition|undefined} value */
proto.taxonomy.model.artifact.Artifact.prototype.setArtifactDefinition = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.taxonomy.model.artifact.Artifact.prototype.clearArtifactDefinition = function() {
  this.setArtifactDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.Artifact.prototype.hasArtifactDefinition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated SymbolDependency dependencies = 5;
 * @return {!Array<!proto.taxonomy.model.artifact.SymbolDependency>}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getDependenciesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.SymbolDependency>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.SymbolDependency, 5));
};


/** @param {!Array<!proto.taxonomy.model.artifact.SymbolDependency>} value */
proto.taxonomy.model.artifact.Artifact.prototype.setDependenciesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.SymbolDependency=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.SymbolDependency}
 */
proto.taxonomy.model.artifact.Artifact.prototype.addDependencies = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.taxonomy.model.artifact.SymbolDependency, opt_index);
};


proto.taxonomy.model.artifact.Artifact.prototype.clearDependenciesList = function() {
  this.setDependenciesList([]);
};


/**
 * repeated ArtifactSymbol incompatible_with_symbols = 6;
 * @return {!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getIncompatibleWithSymbolsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.ArtifactSymbol, 6));
};


/** @param {!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>} value */
proto.taxonomy.model.artifact.Artifact.prototype.setIncompatibleWithSymbolsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.ArtifactSymbol=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.artifact.Artifact.prototype.addIncompatibleWithSymbols = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.taxonomy.model.artifact.ArtifactSymbol, opt_index);
};


proto.taxonomy.model.artifact.Artifact.prototype.clearIncompatibleWithSymbolsList = function() {
  this.setIncompatibleWithSymbolsList([]);
};


/**
 * repeated SymbolInfluence influenced_by_symbols = 7;
 * @return {!Array<!proto.taxonomy.model.artifact.SymbolInfluence>}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getInfluencedBySymbolsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.SymbolInfluence>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.SymbolInfluence, 7));
};


/** @param {!Array<!proto.taxonomy.model.artifact.SymbolInfluence>} value */
proto.taxonomy.model.artifact.Artifact.prototype.setInfluencedBySymbolsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.SymbolInfluence=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.SymbolInfluence}
 */
proto.taxonomy.model.artifact.Artifact.prototype.addInfluencedBySymbols = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.taxonomy.model.artifact.SymbolInfluence, opt_index);
};


proto.taxonomy.model.artifact.Artifact.prototype.clearInfluencedBySymbolsList = function() {
  this.setInfluencedBySymbolsList([]);
};


/**
 * optional string control_uri = 8;
 * @return {string}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getControlUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.Artifact.prototype.setControlUri = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated ArtifactFile artifact_files = 9;
 * @return {!Array<!proto.taxonomy.model.artifact.ArtifactFile>}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getArtifactFilesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.ArtifactFile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.ArtifactFile, 9));
};


/** @param {!Array<!proto.taxonomy.model.artifact.ArtifactFile>} value */
proto.taxonomy.model.artifact.Artifact.prototype.setArtifactFilesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.ArtifactFile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.ArtifactFile}
 */
proto.taxonomy.model.artifact.Artifact.prototype.addArtifactFiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.taxonomy.model.artifact.ArtifactFile, opt_index);
};


proto.taxonomy.model.artifact.Artifact.prototype.clearArtifactFilesList = function() {
  this.setArtifactFilesList([]);
};


/**
 * optional Maps maps = 10;
 * @return {?proto.taxonomy.model.artifact.Maps}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getMaps = function() {
  return /** @type{?proto.taxonomy.model.artifact.Maps} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.Maps, 10));
};


/** @param {?proto.taxonomy.model.artifact.Maps|undefined} value */
proto.taxonomy.model.artifact.Artifact.prototype.setMaps = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.taxonomy.model.artifact.Artifact.prototype.clearMaps = function() {
  this.setMaps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.Artifact.prototype.hasMaps = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated Contributor contributors = 11;
 * @return {!Array<!proto.taxonomy.model.artifact.Contributor>}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getContributorsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.Contributor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.Contributor, 11));
};


/** @param {!Array<!proto.taxonomy.model.artifact.Contributor>} value */
proto.taxonomy.model.artifact.Artifact.prototype.setContributorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.Contributor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.Contributor}
 */
proto.taxonomy.model.artifact.Artifact.prototype.addContributors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.taxonomy.model.artifact.Contributor, opt_index);
};


proto.taxonomy.model.artifact.Artifact.prototype.clearContributorsList = function() {
  this.setContributorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.ArtifactReferenceValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.artifact.ArtifactReferenceValues.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.artifact.ArtifactReferenceValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.ArtifactReferenceValues.displayName = 'proto.taxonomy.model.artifact.ArtifactReferenceValues';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.artifact.ArtifactReferenceValues.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.ArtifactReferenceValues.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.ArtifactReferenceValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.ArtifactReferenceValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactReferenceValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    controlUri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    artifactFilesList: jspb.Message.toObjectList(msg.getArtifactFilesList(),
    proto.taxonomy.model.artifact.ArtifactFile.toObject, includeInstance),
    maps: (f = msg.getMaps()) && proto.taxonomy.model.artifact.Maps.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.ArtifactReferenceValues}
 */
proto.taxonomy.model.artifact.ArtifactReferenceValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.ArtifactReferenceValues;
  return proto.taxonomy.model.artifact.ArtifactReferenceValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.ArtifactReferenceValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.ArtifactReferenceValues}
 */
proto.taxonomy.model.artifact.ArtifactReferenceValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setControlUri(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.artifact.ArtifactFile;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactFile.deserializeBinaryFromReader);
      msg.addArtifactFiles(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.artifact.Maps;
      reader.readMessage(value,proto.taxonomy.model.artifact.Maps.deserializeBinaryFromReader);
      msg.setMaps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.ArtifactReferenceValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.ArtifactReferenceValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.ArtifactReferenceValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactReferenceValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControlUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArtifactFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.taxonomy.model.artifact.ArtifactFile.serializeBinaryToWriter
    );
  }
  f = message.getMaps();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.taxonomy.model.artifact.Maps.serializeBinaryToWriter
    );
  }
};


/**
 * optional string control_uri = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactReferenceValues.prototype.getControlUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactReferenceValues.prototype.setControlUri = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ArtifactFile artifact_files = 2;
 * @return {!Array<!proto.taxonomy.model.artifact.ArtifactFile>}
 */
proto.taxonomy.model.artifact.ArtifactReferenceValues.prototype.getArtifactFilesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.ArtifactFile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.ArtifactFile, 2));
};


/** @param {!Array<!proto.taxonomy.model.artifact.ArtifactFile>} value */
proto.taxonomy.model.artifact.ArtifactReferenceValues.prototype.setArtifactFilesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.ArtifactFile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.ArtifactFile}
 */
proto.taxonomy.model.artifact.ArtifactReferenceValues.prototype.addArtifactFiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.taxonomy.model.artifact.ArtifactFile, opt_index);
};


proto.taxonomy.model.artifact.ArtifactReferenceValues.prototype.clearArtifactFilesList = function() {
  this.setArtifactFilesList([]);
};


/**
 * optional Maps maps = 3;
 * @return {?proto.taxonomy.model.artifact.Maps}
 */
proto.taxonomy.model.artifact.ArtifactReferenceValues.prototype.getMaps = function() {
  return /** @type{?proto.taxonomy.model.artifact.Maps} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.Maps, 3));
};


/** @param {?proto.taxonomy.model.artifact.Maps|undefined} value */
proto.taxonomy.model.artifact.ArtifactReferenceValues.prototype.setMaps = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.taxonomy.model.artifact.ArtifactReferenceValues.prototype.clearMaps = function() {
  this.setMaps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.ArtifactReferenceValues.prototype.hasMaps = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.ArtifactReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.ArtifactReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.ArtifactReference.displayName = 'proto.taxonomy.model.artifact.ArtifactReference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.ArtifactReference.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.ArtifactReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.ArtifactReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    referenceNotes: jspb.Message.getFieldWithDefault(msg, 3, ""),
    values: (f = msg.getValues()) && proto.taxonomy.model.artifact.ArtifactReferenceValues.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.ArtifactReference}
 */
proto.taxonomy.model.artifact.ArtifactReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.ArtifactReference;
  return proto.taxonomy.model.artifact.ArtifactReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.ArtifactReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.ArtifactReference}
 */
proto.taxonomy.model.artifact.ArtifactReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceNotes(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.artifact.ArtifactReferenceValues;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactReferenceValues.deserializeBinaryFromReader);
      msg.setValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.ArtifactReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.ArtifactReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.ArtifactReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getReferenceNotes();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValues();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.taxonomy.model.artifact.ArtifactReferenceValues.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactReference.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactReference.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ArtifactType type = 2;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.ArtifactReference.prototype.getType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.ArtifactReference.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string reference_notes = 3;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactReference.prototype.getReferenceNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactReference.prototype.setReferenceNotes = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ArtifactReferenceValues values = 4;
 * @return {?proto.taxonomy.model.artifact.ArtifactReferenceValues}
 */
proto.taxonomy.model.artifact.ArtifactReference.prototype.getValues = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactReferenceValues} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.ArtifactReferenceValues, 4));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactReferenceValues|undefined} value */
proto.taxonomy.model.artifact.ArtifactReference.prototype.setValues = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.taxonomy.model.artifact.ArtifactReference.prototype.clearValues = function() {
  this.setValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.ArtifactReference.prototype.hasValues = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.SymbolInfluence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.artifact.SymbolInfluence.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.artifact.SymbolInfluence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.SymbolInfluence.displayName = 'proto.taxonomy.model.artifact.SymbolInfluence';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.artifact.SymbolInfluence.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.SymbolInfluence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.SymbolInfluence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.SymbolInfluence.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: (f = msg.getSymbol()) && proto.taxonomy.model.artifact.ArtifactSymbol.toObject(includeInstance, f),
    appliesToList: jspb.Message.toObjectList(msg.getAppliesToList(),
    proto.taxonomy.model.artifact.ArtifactSymbol.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.SymbolInfluence}
 */
proto.taxonomy.model.artifact.SymbolInfluence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.SymbolInfluence;
  return proto.taxonomy.model.artifact.SymbolInfluence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.SymbolInfluence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.SymbolInfluence}
 */
proto.taxonomy.model.artifact.SymbolInfluence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.artifact.ArtifactSymbol;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinaryFromReader);
      msg.setSymbol(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.artifact.ArtifactSymbol;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinaryFromReader);
      msg.addAppliesTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.SymbolInfluence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.SymbolInfluence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.SymbolInfluence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.artifact.ArtifactSymbol.serializeBinaryToWriter
    );
  }
  f = message.getAppliesToList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.taxonomy.model.artifact.ArtifactSymbol.serializeBinaryToWriter
    );
  }
};


/**
 * optional string description = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ArtifactSymbol symbol = 2;
 * @return {?proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.getSymbol = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactSymbol} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.ArtifactSymbol, 2));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactSymbol|undefined} value */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.setSymbol = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.artifact.SymbolInfluence.prototype.clearSymbol = function() {
  this.setSymbol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ArtifactSymbol applies_to = 3;
 * @return {!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>}
 */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.getAppliesToList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.ArtifactSymbol, 3));
};


/** @param {!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>} value */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.setAppliesToList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.ArtifactSymbol=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.addAppliesTo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.taxonomy.model.artifact.ArtifactSymbol, opt_index);
};


proto.taxonomy.model.artifact.SymbolInfluence.prototype.clearAppliesToList = function() {
  this.setAppliesToList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.Contributor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.Contributor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.Contributor.displayName = 'proto.taxonomy.model.artifact.Contributor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.Contributor.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.Contributor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.Contributor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.Contributor.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    organization: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.Contributor}
 */
proto.taxonomy.model.artifact.Contributor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.Contributor;
  return proto.taxonomy.model.artifact.Contributor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.Contributor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.Contributor}
 */
proto.taxonomy.model.artifact.Contributor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.Contributor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.Contributor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.Contributor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.Contributor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.Contributor.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.Contributor.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string organization = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.Contributor.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.Contributor.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.SymbolDependency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.SymbolDependency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.SymbolDependency.displayName = 'proto.taxonomy.model.artifact.SymbolDependency';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.SymbolDependency.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.SymbolDependency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.SymbolDependency} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.SymbolDependency.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: (f = msg.getSymbol()) && proto.taxonomy.model.artifact.ArtifactSymbol.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.SymbolDependency}
 */
proto.taxonomy.model.artifact.SymbolDependency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.SymbolDependency;
  return proto.taxonomy.model.artifact.SymbolDependency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.SymbolDependency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.SymbolDependency}
 */
proto.taxonomy.model.artifact.SymbolDependency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.artifact.ArtifactSymbol;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinaryFromReader);
      msg.setSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.SymbolDependency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.SymbolDependency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.SymbolDependency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.SymbolDependency.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.artifact.ArtifactSymbol.serializeBinaryToWriter
    );
  }
};


/**
 * optional string description = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.SymbolDependency.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.SymbolDependency.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ArtifactSymbol symbol = 2;
 * @return {?proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.artifact.SymbolDependency.prototype.getSymbol = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactSymbol} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.ArtifactSymbol, 2));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactSymbol|undefined} value */
proto.taxonomy.model.artifact.SymbolDependency.prototype.setSymbol = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.artifact.SymbolDependency.prototype.clearSymbol = function() {
  this.setSymbol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.SymbolDependency.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.ArtifactDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.artifact.ArtifactDefinition.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.artifact.ArtifactDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.ArtifactDefinition.displayName = 'proto.taxonomy.model.artifact.ArtifactDefinition';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.artifact.ArtifactDefinition.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.ArtifactDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.ArtifactDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    businessDescription: jspb.Message.getFieldWithDefault(msg, 1, ""),
    businessExample: jspb.Message.getFieldWithDefault(msg, 2, ""),
    analogiesList: jspb.Message.toObjectList(msg.getAnalogiesList(),
    proto.taxonomy.model.artifact.ArtifactAnalogy.toObject, includeInstance),
    comments: jspb.Message.getFieldWithDefault(msg, 4, ""),
    artifact: (f = msg.getArtifact()) && proto.taxonomy.model.artifact.Artifact.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.ArtifactDefinition}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.ArtifactDefinition;
  return proto.taxonomy.model.artifact.ArtifactDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.ArtifactDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.ArtifactDefinition}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessDescription(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessExample(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.artifact.ArtifactAnalogy;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactAnalogy.deserializeBinaryFromReader);
      msg.addAnalogies(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setComments(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.artifact.Artifact;
      reader.readMessage(value,proto.taxonomy.model.artifact.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.ArtifactDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.ArtifactDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBusinessDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBusinessExample();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnalogiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.taxonomy.model.artifact.ArtifactAnalogy.serializeBinaryToWriter
    );
  }
  f = message.getComments();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.taxonomy.model.artifact.Artifact.serializeBinaryToWriter
    );
  }
};


/**
 * optional string business_description = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.getBusinessDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.setBusinessDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string business_example = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.getBusinessExample = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.setBusinessExample = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated ArtifactAnalogy analogies = 3;
 * @return {!Array<!proto.taxonomy.model.artifact.ArtifactAnalogy>}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.getAnalogiesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.ArtifactAnalogy>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.ArtifactAnalogy, 3));
};


/** @param {!Array<!proto.taxonomy.model.artifact.ArtifactAnalogy>} value */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.setAnalogiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.ArtifactAnalogy=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.ArtifactAnalogy}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.addAnalogies = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.taxonomy.model.artifact.ArtifactAnalogy, opt_index);
};


proto.taxonomy.model.artifact.ArtifactDefinition.prototype.clearAnalogiesList = function() {
  this.setAnalogiesList([]);
};


/**
 * optional string comments = 4;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.getComments = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.setComments = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Artifact artifact = 5;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.Artifact, 5));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.taxonomy.model.artifact.ArtifactDefinition.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.ArtifactAnalogy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.ArtifactAnalogy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.ArtifactAnalogy.displayName = 'proto.taxonomy.model.artifact.ArtifactAnalogy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.ArtifactAnalogy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.ArtifactAnalogy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    artifactDefinition: (f = msg.getArtifactDefinition()) && proto.taxonomy.model.artifact.ArtifactDefinition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.ArtifactAnalogy}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.ArtifactAnalogy;
  return proto.taxonomy.model.artifact.ArtifactAnalogy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.ArtifactAnalogy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.ArtifactAnalogy}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.artifact.ArtifactDefinition;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactDefinition.deserializeBinaryFromReader);
      msg.setArtifactDefinition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.ArtifactAnalogy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.ArtifactAnalogy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArtifactDefinition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.taxonomy.model.artifact.ArtifactDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ArtifactDefinition artifact_definition = 3;
 * @return {?proto.taxonomy.model.artifact.ArtifactDefinition}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.getArtifactDefinition = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactDefinition} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.ArtifactDefinition, 3));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactDefinition|undefined} value */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.setArtifactDefinition = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.clearArtifactDefinition = function() {
  this.setArtifactDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.hasArtifactDefinition = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.ArtifactFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.ArtifactFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.ArtifactFile.displayName = 'proto.taxonomy.model.artifact.ArtifactFile';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.ArtifactFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.ArtifactFile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactFile.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fileName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fileData: msg.getFileData_asB64(),
    artifact: (f = msg.getArtifact()) && proto.taxonomy.model.artifact.Artifact.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.ArtifactFile}
 */
proto.taxonomy.model.artifact.ArtifactFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.ArtifactFile;
  return proto.taxonomy.model.artifact.ArtifactFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.ArtifactFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.ArtifactFile}
 */
proto.taxonomy.model.artifact.ArtifactFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactContent} */ (reader.readEnum());
      msg.setContent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFileData(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.artifact.Artifact;
      reader.readMessage(value,proto.taxonomy.model.artifact.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.ArtifactFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.ArtifactFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFileName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFileData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.taxonomy.model.artifact.Artifact.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactContent content = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactContent}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.getContent = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactContent} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactContent} value */
proto.taxonomy.model.artifact.ArtifactFile.prototype.setContent = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string file_name = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactFile.prototype.setFileName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes file_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.getFileData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes file_data = 3;
 * This is a type-conversion wrapper around `getFileData()`
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.getFileData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFileData()));
};


/**
 * optional bytes file_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFileData()`
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.getFileData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFileData()));
};


/** @param {!(string|Uint8Array)} value */
proto.taxonomy.model.artifact.ArtifactFile.prototype.setFileData = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional Artifact artifact = 4;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.Artifact, 4));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.artifact.ArtifactFile.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.taxonomy.model.artifact.ArtifactFile.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.Maps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.artifact.Maps.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.artifact.Maps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.Maps.displayName = 'proto.taxonomy.model.artifact.Maps';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.artifact.Maps.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.Maps.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.Maps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.Maps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.Maps.toObject = function(includeInstance, msg) {
  var f, obj = {
    codeReferencesList: jspb.Message.toObjectList(msg.getCodeReferencesList(),
    proto.taxonomy.model.artifact.MapReference.toObject, includeInstance),
    implementationReferencesList: jspb.Message.toObjectList(msg.getImplementationReferencesList(),
    proto.taxonomy.model.artifact.MapReference.toObject, includeInstance),
    resourcesList: jspb.Message.toObjectList(msg.getResourcesList(),
    proto.taxonomy.model.artifact.MapResourceReference.toObject, includeInstance),
    artifact: (f = msg.getArtifact()) && proto.taxonomy.model.artifact.Artifact.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.Maps}
 */
proto.taxonomy.model.artifact.Maps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.Maps;
  return proto.taxonomy.model.artifact.Maps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.Maps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.Maps}
 */
proto.taxonomy.model.artifact.Maps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.artifact.MapReference;
      reader.readMessage(value,proto.taxonomy.model.artifact.MapReference.deserializeBinaryFromReader);
      msg.addCodeReferences(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.artifact.MapReference;
      reader.readMessage(value,proto.taxonomy.model.artifact.MapReference.deserializeBinaryFromReader);
      msg.addImplementationReferences(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.artifact.MapResourceReference;
      reader.readMessage(value,proto.taxonomy.model.artifact.MapResourceReference.deserializeBinaryFromReader);
      msg.addResources(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.artifact.Artifact;
      reader.readMessage(value,proto.taxonomy.model.artifact.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.Maps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.Maps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.Maps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.Maps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodeReferencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.taxonomy.model.artifact.MapReference.serializeBinaryToWriter
    );
  }
  f = message.getImplementationReferencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.taxonomy.model.artifact.MapReference.serializeBinaryToWriter
    );
  }
  f = message.getResourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.taxonomy.model.artifact.MapResourceReference.serializeBinaryToWriter
    );
  }
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.taxonomy.model.artifact.Artifact.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MapReference code_references = 1;
 * @return {!Array<!proto.taxonomy.model.artifact.MapReference>}
 */
proto.taxonomy.model.artifact.Maps.prototype.getCodeReferencesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.MapReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.MapReference, 1));
};


/** @param {!Array<!proto.taxonomy.model.artifact.MapReference>} value */
proto.taxonomy.model.artifact.Maps.prototype.setCodeReferencesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.MapReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.MapReference}
 */
proto.taxonomy.model.artifact.Maps.prototype.addCodeReferences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.taxonomy.model.artifact.MapReference, opt_index);
};


proto.taxonomy.model.artifact.Maps.prototype.clearCodeReferencesList = function() {
  this.setCodeReferencesList([]);
};


/**
 * repeated MapReference implementation_references = 2;
 * @return {!Array<!proto.taxonomy.model.artifact.MapReference>}
 */
proto.taxonomy.model.artifact.Maps.prototype.getImplementationReferencesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.MapReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.MapReference, 2));
};


/** @param {!Array<!proto.taxonomy.model.artifact.MapReference>} value */
proto.taxonomy.model.artifact.Maps.prototype.setImplementationReferencesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.MapReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.MapReference}
 */
proto.taxonomy.model.artifact.Maps.prototype.addImplementationReferences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.taxonomy.model.artifact.MapReference, opt_index);
};


proto.taxonomy.model.artifact.Maps.prototype.clearImplementationReferencesList = function() {
  this.setImplementationReferencesList([]);
};


/**
 * repeated MapResourceReference resources = 3;
 * @return {!Array<!proto.taxonomy.model.artifact.MapResourceReference>}
 */
proto.taxonomy.model.artifact.Maps.prototype.getResourcesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.MapResourceReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.MapResourceReference, 3));
};


/** @param {!Array<!proto.taxonomy.model.artifact.MapResourceReference>} value */
proto.taxonomy.model.artifact.Maps.prototype.setResourcesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.MapResourceReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.MapResourceReference}
 */
proto.taxonomy.model.artifact.Maps.prototype.addResources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.taxonomy.model.artifact.MapResourceReference, opt_index);
};


proto.taxonomy.model.artifact.Maps.prototype.clearResourcesList = function() {
  this.setResourcesList([]);
};


/**
 * optional Artifact artifact = 4;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.artifact.Maps.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.Artifact, 4));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.artifact.Maps.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.taxonomy.model.artifact.Maps.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.Maps.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.MapReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.MapReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.MapReference.displayName = 'proto.taxonomy.model.artifact.MapReference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.MapReference.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.MapReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.MapReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.MapReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    mappingType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    platform: jspb.Message.getFieldWithDefault(msg, 3, 0),
    referencePath: jspb.Message.getFieldWithDefault(msg, 4, ""),
    maps: (f = msg.getMaps()) && proto.taxonomy.model.artifact.Maps.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.MapReference}
 */
proto.taxonomy.model.artifact.MapReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.MapReference;
  return proto.taxonomy.model.artifact.MapReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.MapReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.MapReference}
 */
proto.taxonomy.model.artifact.MapReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.MappingType} */ (reader.readEnum());
      msg.setMappingType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.taxonomy.model.artifact.TargetPlatform} */ (reader.readEnum());
      msg.setPlatform(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferencePath(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.artifact.Maps;
      reader.readMessage(value,proto.taxonomy.model.artifact.Maps.deserializeBinaryFromReader);
      msg.setMaps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.MapReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.MapReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.MapReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.MapReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMappingType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlatform();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getReferencePath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMaps();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.taxonomy.model.artifact.Maps.serializeBinaryToWriter
    );
  }
};


/**
 * optional MappingType mapping_type = 1;
 * @return {!proto.taxonomy.model.artifact.MappingType}
 */
proto.taxonomy.model.artifact.MapReference.prototype.getMappingType = function() {
  return /** @type {!proto.taxonomy.model.artifact.MappingType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.MappingType} value */
proto.taxonomy.model.artifact.MapReference.prototype.setMappingType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.MapReference.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.MapReference.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TargetPlatform platform = 3;
 * @return {!proto.taxonomy.model.artifact.TargetPlatform}
 */
proto.taxonomy.model.artifact.MapReference.prototype.getPlatform = function() {
  return /** @type {!proto.taxonomy.model.artifact.TargetPlatform} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.taxonomy.model.artifact.TargetPlatform} value */
proto.taxonomy.model.artifact.MapReference.prototype.setPlatform = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string reference_path = 4;
 * @return {string}
 */
proto.taxonomy.model.artifact.MapReference.prototype.getReferencePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.MapReference.prototype.setReferencePath = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Maps maps = 5;
 * @return {?proto.taxonomy.model.artifact.Maps}
 */
proto.taxonomy.model.artifact.MapReference.prototype.getMaps = function() {
  return /** @type{?proto.taxonomy.model.artifact.Maps} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.Maps, 5));
};


/** @param {?proto.taxonomy.model.artifact.Maps|undefined} value */
proto.taxonomy.model.artifact.MapReference.prototype.setMaps = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.taxonomy.model.artifact.MapReference.prototype.clearMaps = function() {
  this.setMaps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.MapReference.prototype.hasMaps = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.MapResourceReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.MapResourceReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.MapResourceReference.displayName = 'proto.taxonomy.model.artifact.MapResourceReference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.MapResourceReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.MapResourceReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.MapResourceReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    mappingType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    resourcePath: jspb.Message.getFieldWithDefault(msg, 4, ""),
    maps: (f = msg.getMaps()) && proto.taxonomy.model.artifact.Maps.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.MapResourceReference}
 */
proto.taxonomy.model.artifact.MapResourceReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.MapResourceReference;
  return proto.taxonomy.model.artifact.MapResourceReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.MapResourceReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.MapResourceReference}
 */
proto.taxonomy.model.artifact.MapResourceReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.MappingType} */ (reader.readEnum());
      msg.setMappingType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setResourcePath(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.artifact.Maps;
      reader.readMessage(value,proto.taxonomy.model.artifact.Maps.deserializeBinaryFromReader);
      msg.setMaps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.MapResourceReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.MapResourceReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.MapResourceReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMappingType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResourcePath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMaps();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.taxonomy.model.artifact.Maps.serializeBinaryToWriter
    );
  }
};


/**
 * optional MappingType mapping_type = 1;
 * @return {!proto.taxonomy.model.artifact.MappingType}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.getMappingType = function() {
  return /** @type {!proto.taxonomy.model.artifact.MappingType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.MappingType} value */
proto.taxonomy.model.artifact.MapResourceReference.prototype.setMappingType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.MapResourceReference.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.MapResourceReference.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string resource_path = 4;
 * @return {string}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.getResourcePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.MapResourceReference.prototype.setResourcePath = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Maps maps = 5;
 * @return {?proto.taxonomy.model.artifact.Maps}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.getMaps = function() {
  return /** @type{?proto.taxonomy.model.artifact.Maps} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.Maps, 5));
};


/** @param {?proto.taxonomy.model.artifact.Maps|undefined} value */
proto.taxonomy.model.artifact.MapResourceReference.prototype.setMaps = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.taxonomy.model.artifact.MapResourceReference.prototype.clearMaps = function() {
  this.setMaps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.hasMaps = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.NewArtifactRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.NewArtifactRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.NewArtifactRequest.displayName = 'proto.taxonomy.model.artifact.NewArtifactRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.NewArtifactRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.NewArtifactRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.NewArtifactRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.NewArtifactRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    artifact: (f = msg.getArtifact()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.NewArtifactRequest}
 */
proto.taxonomy.model.artifact.NewArtifactRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.NewArtifactRequest;
  return proto.taxonomy.model.artifact.NewArtifactRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.NewArtifactRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.NewArtifactRequest}
 */
proto.taxonomy.model.artifact.NewArtifactRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.NewArtifactRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.NewArtifactRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.NewArtifactRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.NewArtifactRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactType type = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.NewArtifactRequest.prototype.getType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.NewArtifactRequest.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.Any artifact = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.artifact.NewArtifactRequest.prototype.getArtifact = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.artifact.NewArtifactRequest.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.artifact.NewArtifactRequest.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.NewArtifactRequest.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.NewArtifactResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.NewArtifactResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.NewArtifactResponse.displayName = 'proto.taxonomy.model.artifact.NewArtifactResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.NewArtifactResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.NewArtifactResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.NewArtifactResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.NewArtifactResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    artifactTypeObject: (f = msg.getArtifactTypeObject()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.NewArtifactResponse}
 */
proto.taxonomy.model.artifact.NewArtifactResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.NewArtifactResponse;
  return proto.taxonomy.model.artifact.NewArtifactResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.NewArtifactResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.NewArtifactResponse}
 */
proto.taxonomy.model.artifact.NewArtifactResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setArtifactTypeObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.NewArtifactResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.NewArtifactResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.NewArtifactResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.NewArtifactResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArtifactTypeObject();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactType type = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.NewArtifactResponse.prototype.getType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.NewArtifactResponse.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.Any artifact_type_object = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.artifact.NewArtifactResponse.prototype.getArtifactTypeObject = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.artifact.NewArtifactResponse.prototype.setArtifactTypeObject = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.artifact.NewArtifactResponse.prototype.clearArtifactTypeObject = function() {
  this.setArtifactTypeObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.NewArtifactResponse.prototype.hasArtifactTypeObject = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.UpdateArtifactRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.UpdateArtifactRequest.displayName = 'proto.taxonomy.model.artifact.UpdateArtifactRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.UpdateArtifactRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.UpdateArtifactRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    artifactTypeObject: (f = msg.getArtifactTypeObject()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.UpdateArtifactRequest}
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.UpdateArtifactRequest;
  return proto.taxonomy.model.artifact.UpdateArtifactRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.UpdateArtifactRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.UpdateArtifactRequest}
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setArtifactTypeObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.UpdateArtifactRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.UpdateArtifactRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArtifactTypeObject();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactType type = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.getType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.Any artifact_type_object = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.getArtifactTypeObject = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.setArtifactTypeObject = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.clearArtifactTypeObject = function() {
  this.setArtifactTypeObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.hasArtifactTypeObject = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.UpdateArtifactResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.UpdateArtifactResponse.displayName = 'proto.taxonomy.model.artifact.UpdateArtifactResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.UpdateArtifactResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.UpdateArtifactResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    updated: jspb.Message.getFieldWithDefault(msg, 2, false),
    artifactTypeObject: (f = msg.getArtifactTypeObject()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.UpdateArtifactResponse}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.UpdateArtifactResponse;
  return proto.taxonomy.model.artifact.UpdateArtifactResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.UpdateArtifactResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.UpdateArtifactResponse}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdated(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setArtifactTypeObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.UpdateArtifactResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.UpdateArtifactResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUpdated();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getArtifactTypeObject();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactType type = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.getType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool updated = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.getUpdated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.setUpdated = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional google.protobuf.Any artifact_type_object = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.getArtifactTypeObject = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.setArtifactTypeObject = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.clearArtifactTypeObject = function() {
  this.setArtifactTypeObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.hasArtifactTypeObject = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.DeleteArtifactRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.DeleteArtifactRequest.displayName = 'proto.taxonomy.model.artifact.DeleteArtifactRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.DeleteArtifactRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.DeleteArtifactRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifactSymbol: (f = msg.getArtifactSymbol()) && proto.taxonomy.model.artifact.ArtifactSymbol.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.DeleteArtifactRequest}
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.DeleteArtifactRequest;
  return proto.taxonomy.model.artifact.DeleteArtifactRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.DeleteArtifactRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.DeleteArtifactRequest}
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.artifact.ArtifactSymbol;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinaryFromReader);
      msg.setArtifactSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.DeleteArtifactRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.DeleteArtifactRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifactSymbol();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.artifact.ArtifactSymbol.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactSymbol artifact_symbol = 1;
 * @return {?proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.prototype.getArtifactSymbol = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactSymbol} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.ArtifactSymbol, 1));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactSymbol|undefined} value */
proto.taxonomy.model.artifact.DeleteArtifactRequest.prototype.setArtifactSymbol = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.artifact.DeleteArtifactRequest.prototype.clearArtifactSymbol = function() {
  this.setArtifactSymbol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.prototype.hasArtifactSymbol = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.DeleteArtifactResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.DeleteArtifactResponse.displayName = 'proto.taxonomy.model.artifact.DeleteArtifactResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.DeleteArtifactResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.DeleteArtifactResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deleted: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.DeleteArtifactResponse}
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.DeleteArtifactResponse;
  return proto.taxonomy.model.artifact.DeleteArtifactResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.DeleteArtifactResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.DeleteArtifactResponse}
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.DeleteArtifactResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.DeleteArtifactResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeleted();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool deleted = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.taxonomy.model.artifact.DeleteArtifactResponse.prototype.setDeleted = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.TokenTemplateId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.TokenTemplateId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.TokenTemplateId.displayName = 'proto.taxonomy.model.artifact.TokenTemplateId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.TokenTemplateId.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.TokenTemplateId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.TokenTemplateId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.TokenTemplateId.toObject = function(includeInstance, msg) {
  var f, obj = {
    definitionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.TokenTemplateId}
 */
proto.taxonomy.model.artifact.TokenTemplateId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.TokenTemplateId;
  return proto.taxonomy.model.artifact.TokenTemplateId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.TokenTemplateId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.TokenTemplateId}
 */
proto.taxonomy.model.artifact.TokenTemplateId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefinitionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.TokenTemplateId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.TokenTemplateId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.TokenTemplateId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.TokenTemplateId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefinitionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string definition_id = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.TokenTemplateId.prototype.getDefinitionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.TokenTemplateId.prototype.setDefinitionId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.Identifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.Identifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.Identifier.displayName = 'proto.taxonomy.model.artifact.Identifier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.Identifier.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.Identifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.Identifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.Identifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.Identifier}
 */
proto.taxonomy.model.artifact.Identifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.Identifier;
  return proto.taxonomy.model.artifact.Identifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.Identifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.Identifier}
 */
proto.taxonomy.model.artifact.Identifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.Identifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.Identifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.Identifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.Identifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.Identifier.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.Identifier.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.NewTemplateDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.NewTemplateDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.NewTemplateDefinition.displayName = 'proto.taxonomy.model.artifact.NewTemplateDefinition';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.NewTemplateDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.NewTemplateDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.NewTemplateDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.NewTemplateDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    templateFormulaId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokenName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.NewTemplateDefinition}
 */
proto.taxonomy.model.artifact.NewTemplateDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.NewTemplateDefinition;
  return proto.taxonomy.model.artifact.NewTemplateDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.NewTemplateDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.NewTemplateDefinition}
 */
proto.taxonomy.model.artifact.NewTemplateDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemplateFormulaId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.NewTemplateDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.NewTemplateDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.NewTemplateDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.NewTemplateDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemplateFormulaId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokenName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string template_formula_id = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.NewTemplateDefinition.prototype.getTemplateFormulaId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.NewTemplateDefinition.prototype.setTemplateFormulaId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token_name = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.NewTemplateDefinition.prototype.getTokenName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.NewTemplateDefinition.prototype.setTokenName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.InitializeNewArtifactRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.InitializeNewArtifactRequest.displayName = 'proto.taxonomy.model.artifact.InitializeNewArtifactRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.InitializeNewArtifactRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.InitializeNewArtifactRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifactType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    templateType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    tokenType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    tokenUnit: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.InitializeNewArtifactRequest}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.InitializeNewArtifactRequest;
  return proto.taxonomy.model.artifact.InitializeNewArtifactRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.InitializeNewArtifactRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.InitializeNewArtifactRequest}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setArtifactType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {!proto.taxonomy.model.artifact.TemplateType} */ (reader.readEnum());
      msg.setTemplateType(value);
      break;
    case 5:
      var value = /** @type {!proto.taxonomy.model.artifact.TokenType} */ (reader.readEnum());
      msg.setTokenType(value);
      break;
    case 6:
      var value = /** @type {!proto.taxonomy.model.artifact.TokenUnit} */ (reader.readEnum());
      msg.setTokenUnit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.InitializeNewArtifactRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.InitializeNewArtifactRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifactType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTemplateType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTokenType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getTokenUnit();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional ArtifactType artifact_type = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.prototype.getArtifactType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.prototype.setArtifactType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional TemplateType template_type = 4;
 * @return {!proto.taxonomy.model.artifact.TemplateType}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.prototype.getTemplateType = function() {
  return /** @type {!proto.taxonomy.model.artifact.TemplateType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.taxonomy.model.artifact.TemplateType} value */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.prototype.setTemplateType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional TokenType token_type = 5;
 * @return {!proto.taxonomy.model.artifact.TokenType}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.prototype.getTokenType = function() {
  return /** @type {!proto.taxonomy.model.artifact.TokenType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.taxonomy.model.artifact.TokenType} value */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.prototype.setTokenType = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional TokenUnit token_unit = 6;
 * @return {!proto.taxonomy.model.artifact.TokenUnit}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.prototype.getTokenUnit = function() {
  return /** @type {!proto.taxonomy.model.artifact.TokenUnit} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.taxonomy.model.artifact.TokenUnit} value */
proto.taxonomy.model.artifact.InitializeNewArtifactRequest.prototype.setTokenUnit = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.InitializeNewArtifactResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.InitializeNewArtifactResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.InitializeNewArtifactResponse.displayName = 'proto.taxonomy.model.artifact.InitializeNewArtifactResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.InitializeNewArtifactResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.InitializeNewArtifactResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.InitializeNewArtifactResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifactType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    artifact: (f = msg.getArtifact()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.InitializeNewArtifactResponse}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.InitializeNewArtifactResponse;
  return proto.taxonomy.model.artifact.InitializeNewArtifactResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.InitializeNewArtifactResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.InitializeNewArtifactResponse}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setArtifactType(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.InitializeNewArtifactResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.InitializeNewArtifactResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.InitializeNewArtifactResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifactType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactType artifact_type = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactResponse.prototype.getArtifactType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.InitializeNewArtifactResponse.prototype.setArtifactType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.Any artifact = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactResponse.prototype.getArtifact = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.artifact.InitializeNewArtifactResponse.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.artifact.InitializeNewArtifactResponse.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.InitializeNewArtifactResponse.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.CommitUpdatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.CommitUpdatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.CommitUpdatesRequest.displayName = 'proto.taxonomy.model.artifact.CommitUpdatesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.CommitUpdatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.CommitUpdatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.CommitUpdatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.CommitUpdatesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    commitMessage: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.CommitUpdatesRequest}
 */
proto.taxonomy.model.artifact.CommitUpdatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.CommitUpdatesRequest;
  return proto.taxonomy.model.artifact.CommitUpdatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.CommitUpdatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.CommitUpdatesRequest}
 */
proto.taxonomy.model.artifact.CommitUpdatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.CommitUpdatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.CommitUpdatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.CommitUpdatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.CommitUpdatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommitMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string commit_message = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.CommitUpdatesRequest.prototype.getCommitMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.CommitUpdatesRequest.prototype.setCommitMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.CommitUpdatesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.CommitUpdatesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.CommitUpdatesResponse.displayName = 'proto.taxonomy.model.artifact.CommitUpdatesResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.CommitUpdatesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.CommitUpdatesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.CommitUpdatesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.CommitUpdatesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.CommitUpdatesResponse}
 */
proto.taxonomy.model.artifact.CommitUpdatesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.CommitUpdatesResponse;
  return proto.taxonomy.model.artifact.CommitUpdatesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.CommitUpdatesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.CommitUpdatesResponse}
 */
proto.taxonomy.model.artifact.CommitUpdatesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.CommitUpdatesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.CommitUpdatesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.CommitUpdatesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.CommitUpdatesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.CommitUpdatesResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.CommitUpdatesResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.IssuePullRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.IssuePullRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.IssuePullRequest.displayName = 'proto.taxonomy.model.artifact.IssuePullRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.IssuePullRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.IssuePullRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.IssuePullRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.IssuePullRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.IssuePullRequest}
 */
proto.taxonomy.model.artifact.IssuePullRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.IssuePullRequest;
  return proto.taxonomy.model.artifact.IssuePullRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.IssuePullRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.IssuePullRequest}
 */
proto.taxonomy.model.artifact.IssuePullRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.IssuePullRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.IssuePullRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.IssuePullRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.IssuePullRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.IssuePullResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.IssuePullResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.IssuePullResponse.displayName = 'proto.taxonomy.model.artifact.IssuePullResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.IssuePullResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.IssuePullResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.IssuePullResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.IssuePullResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.IssuePullResponse}
 */
proto.taxonomy.model.artifact.IssuePullResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.IssuePullResponse;
  return proto.taxonomy.model.artifact.IssuePullResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.IssuePullResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.IssuePullResponse}
 */
proto.taxonomy.model.artifact.IssuePullResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.IssuePullResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.IssuePullResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.IssuePullResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.IssuePullResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string response = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.IssuePullResponse.prototype.getResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.IssuePullResponse.prototype.setResponse = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.ConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.ConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.ConfigurationRequest.displayName = 'proto.taxonomy.model.artifact.ConfigurationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.ConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.ConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.ConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.ConfigurationRequest}
 */
proto.taxonomy.model.artifact.ConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.ConfigurationRequest;
  return proto.taxonomy.model.artifact.ConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.ConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.ConfigurationRequest}
 */
proto.taxonomy.model.artifact.ConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.ConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.ConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.ConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.ServiceConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.ServiceConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.ServiceConfiguration.displayName = 'proto.taxonomy.model.artifact.ServiceConfiguration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.ServiceConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.ServiceConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.ServiceConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ServiceConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    readOnly: jspb.Message.getFieldWithDefault(msg, 1, false),
    gitId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gitBranch: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.ServiceConfiguration}
 */
proto.taxonomy.model.artifact.ServiceConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.ServiceConfiguration;
  return proto.taxonomy.model.artifact.ServiceConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.ServiceConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.ServiceConfiguration}
 */
proto.taxonomy.model.artifact.ServiceConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadOnly(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGitId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGitBranch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.ServiceConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.ServiceConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.ServiceConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ServiceConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReadOnly();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getGitId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGitBranch();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool read_only = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.ServiceConfiguration.prototype.getReadOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.taxonomy.model.artifact.ServiceConfiguration.prototype.setReadOnly = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string git_id = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.ServiceConfiguration.prototype.getGitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ServiceConfiguration.prototype.setGitId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string git_branch = 3;
 * @return {string}
 */
proto.taxonomy.model.artifact.ServiceConfiguration.prototype.getGitBranch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ServiceConfiguration.prototype.setGitBranch = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.QueryOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.QueryOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.QueryOptions.displayName = 'proto.taxonomy.model.artifact.QueryOptions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.QueryOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.QueryOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.QueryOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.QueryOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifactType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxItemReturn: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lastItemIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    byClassification: jspb.Message.getFieldWithDefault(msg, 4, false),
    classification: (f = msg.getClassification()) && proto.taxonomy.model.artifact.Classification.toObject(includeInstance, f),
    includeHybrids: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.QueryOptions}
 */
proto.taxonomy.model.artifact.QueryOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.QueryOptions;
  return proto.taxonomy.model.artifact.QueryOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.QueryOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.QueryOptions}
 */
proto.taxonomy.model.artifact.QueryOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setArtifactType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxItemReturn(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLastItemIndex(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setByClassification(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.artifact.Classification;
      reader.readMessage(value,proto.taxonomy.model.artifact.Classification.deserializeBinaryFromReader);
      msg.setClassification(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeHybrids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.QueryOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.QueryOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.QueryOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.QueryOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifactType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMaxItemReturn();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLastItemIndex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getByClassification();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getClassification();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.taxonomy.model.artifact.Classification.serializeBinaryToWriter
    );
  }
  f = message.getIncludeHybrids();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional ArtifactType artifact_type = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.QueryOptions.prototype.getArtifactType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.QueryOptions.prototype.setArtifactType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 max_item_return = 2;
 * @return {number}
 */
proto.taxonomy.model.artifact.QueryOptions.prototype.getMaxItemReturn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.taxonomy.model.artifact.QueryOptions.prototype.setMaxItemReturn = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 last_item_index = 3;
 * @return {number}
 */
proto.taxonomy.model.artifact.QueryOptions.prototype.getLastItemIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.taxonomy.model.artifact.QueryOptions.prototype.setLastItemIndex = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool by_classification = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.QueryOptions.prototype.getByClassification = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.taxonomy.model.artifact.QueryOptions.prototype.setByClassification = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Classification classification = 5;
 * @return {?proto.taxonomy.model.artifact.Classification}
 */
proto.taxonomy.model.artifact.QueryOptions.prototype.getClassification = function() {
  return /** @type{?proto.taxonomy.model.artifact.Classification} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.Classification, 5));
};


/** @param {?proto.taxonomy.model.artifact.Classification|undefined} value */
proto.taxonomy.model.artifact.QueryOptions.prototype.setClassification = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.taxonomy.model.artifact.QueryOptions.prototype.clearClassification = function() {
  this.setClassification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.QueryOptions.prototype.hasClassification = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool include_hybrids = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.QueryOptions.prototype.getIncludeHybrids = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.taxonomy.model.artifact.QueryOptions.prototype.setIncludeHybrids = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.QueryResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.QueryResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.QueryResult.displayName = 'proto.taxonomy.model.artifact.QueryResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.QueryResult.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.QueryResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.QueryResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.QueryResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifactType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    firstItemIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lastItemIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalItemsInCollection: jspb.Message.getFieldWithDefault(msg, 4, 0),
    artifactCollection: (f = msg.getArtifactCollection()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.QueryResult}
 */
proto.taxonomy.model.artifact.QueryResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.QueryResult;
  return proto.taxonomy.model.artifact.QueryResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.QueryResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.QueryResult}
 */
proto.taxonomy.model.artifact.QueryResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setArtifactType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFirstItemIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLastItemIndex(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalItemsInCollection(value);
      break;
    case 5:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setArtifactCollection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.QueryResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.QueryResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.QueryResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.QueryResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifactType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFirstItemIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLastItemIndex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTotalItemsInCollection();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getArtifactCollection();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactType artifact_type = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.QueryResult.prototype.getArtifactType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.QueryResult.prototype.setArtifactType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 first_item_index = 2;
 * @return {number}
 */
proto.taxonomy.model.artifact.QueryResult.prototype.getFirstItemIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.taxonomy.model.artifact.QueryResult.prototype.setFirstItemIndex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 last_item_index = 3;
 * @return {number}
 */
proto.taxonomy.model.artifact.QueryResult.prototype.getLastItemIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.taxonomy.model.artifact.QueryResult.prototype.setLastItemIndex = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 total_items_in_collection = 4;
 * @return {number}
 */
proto.taxonomy.model.artifact.QueryResult.prototype.getTotalItemsInCollection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.taxonomy.model.artifact.QueryResult.prototype.setTotalItemsInCollection = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional google.protobuf.Any artifact_collection = 5;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.artifact.QueryResult.prototype.getArtifactCollection = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 5));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.artifact.QueryResult.prototype.setArtifactCollection = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.taxonomy.model.artifact.QueryResult.prototype.clearArtifactCollection = function() {
  this.setArtifactCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.QueryResult.prototype.hasArtifactCollection = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.FormulaGrammar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.FormulaGrammar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.FormulaGrammar.displayName = 'proto.taxonomy.model.artifact.FormulaGrammar';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.FormulaGrammar.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.FormulaGrammar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.FormulaGrammar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.FormulaGrammar.toObject = function(includeInstance, msg) {
  var f, obj = {
    singleTokenGrammar: (f = msg.getSingleTokenGrammar()) && proto.taxonomy.model.artifact.SingleTokenGrammar.toObject(includeInstance, f),
    hybridGrammar: (f = msg.getHybridGrammar()) && proto.taxonomy.model.artifact.HybridTokenGrammar.toObject(includeInstance, f),
    hybridWithHybridsGrammar: (f = msg.getHybridWithHybridsGrammar()) && proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.FormulaGrammar}
 */
proto.taxonomy.model.artifact.FormulaGrammar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.FormulaGrammar;
  return proto.taxonomy.model.artifact.FormulaGrammar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.FormulaGrammar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.FormulaGrammar}
 */
proto.taxonomy.model.artifact.FormulaGrammar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.artifact.SingleTokenGrammar;
      reader.readMessage(value,proto.taxonomy.model.artifact.SingleTokenGrammar.deserializeBinaryFromReader);
      msg.setSingleTokenGrammar(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.artifact.HybridTokenGrammar;
      reader.readMessage(value,proto.taxonomy.model.artifact.HybridTokenGrammar.deserializeBinaryFromReader);
      msg.setHybridGrammar(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar;
      reader.readMessage(value,proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.deserializeBinaryFromReader);
      msg.setHybridWithHybridsGrammar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.FormulaGrammar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.FormulaGrammar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.FormulaGrammar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.FormulaGrammar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSingleTokenGrammar();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.artifact.SingleTokenGrammar.serializeBinaryToWriter
    );
  }
  f = message.getHybridGrammar();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.artifact.HybridTokenGrammar.serializeBinaryToWriter
    );
  }
  f = message.getHybridWithHybridsGrammar();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.serializeBinaryToWriter
    );
  }
};


/**
 * optional SingleTokenGrammar single_token_grammar = 1;
 * @return {?proto.taxonomy.model.artifact.SingleTokenGrammar}
 */
proto.taxonomy.model.artifact.FormulaGrammar.prototype.getSingleTokenGrammar = function() {
  return /** @type{?proto.taxonomy.model.artifact.SingleTokenGrammar} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.SingleTokenGrammar, 1));
};


/** @param {?proto.taxonomy.model.artifact.SingleTokenGrammar|undefined} value */
proto.taxonomy.model.artifact.FormulaGrammar.prototype.setSingleTokenGrammar = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.artifact.FormulaGrammar.prototype.clearSingleTokenGrammar = function() {
  this.setSingleTokenGrammar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.FormulaGrammar.prototype.hasSingleTokenGrammar = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HybridTokenGrammar hybrid_grammar = 2;
 * @return {?proto.taxonomy.model.artifact.HybridTokenGrammar}
 */
proto.taxonomy.model.artifact.FormulaGrammar.prototype.getHybridGrammar = function() {
  return /** @type{?proto.taxonomy.model.artifact.HybridTokenGrammar} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.HybridTokenGrammar, 2));
};


/** @param {?proto.taxonomy.model.artifact.HybridTokenGrammar|undefined} value */
proto.taxonomy.model.artifact.FormulaGrammar.prototype.setHybridGrammar = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.taxonomy.model.artifact.FormulaGrammar.prototype.clearHybridGrammar = function() {
  this.setHybridGrammar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.FormulaGrammar.prototype.hasHybridGrammar = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional HybridTokenWithHybridChildrenGrammar hybrid_with_hybrids_grammar = 3;
 * @return {?proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar}
 */
proto.taxonomy.model.artifact.FormulaGrammar.prototype.getHybridWithHybridsGrammar = function() {
  return /** @type{?proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar, 3));
};


/** @param {?proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar|undefined} value */
proto.taxonomy.model.artifact.FormulaGrammar.prototype.setHybridWithHybridsGrammar = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.taxonomy.model.artifact.FormulaGrammar.prototype.clearHybridWithHybridsGrammar = function() {
  this.setHybridWithHybridsGrammar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.FormulaGrammar.prototype.hasHybridWithHybridsGrammar = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.HybridTokenGrammar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.artifact.HybridTokenGrammar.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.artifact.HybridTokenGrammar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.HybridTokenGrammar.displayName = 'proto.taxonomy.model.artifact.HybridTokenGrammar';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.artifact.HybridTokenGrammar.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.HybridTokenGrammar.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.HybridTokenGrammar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.HybridTokenGrammar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.HybridTokenGrammar.toObject = function(includeInstance, msg) {
  var f, obj = {
    parent: (f = msg.getParent()) && proto.taxonomy.model.artifact.SingleTokenGrammar.toObject(includeInstance, f),
    childrenStart: jspb.Message.getFieldWithDefault(msg, 2, ""),
    childTokensList: jspb.Message.toObjectList(msg.getChildTokensList(),
    proto.taxonomy.model.artifact.SingleTokenGrammar.toObject, includeInstance),
    childrenEnd: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.HybridTokenGrammar}
 */
proto.taxonomy.model.artifact.HybridTokenGrammar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.HybridTokenGrammar;
  return proto.taxonomy.model.artifact.HybridTokenGrammar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.HybridTokenGrammar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.HybridTokenGrammar}
 */
proto.taxonomy.model.artifact.HybridTokenGrammar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.artifact.SingleTokenGrammar;
      reader.readMessage(value,proto.taxonomy.model.artifact.SingleTokenGrammar.deserializeBinaryFromReader);
      msg.setParent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChildrenStart(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.artifact.SingleTokenGrammar;
      reader.readMessage(value,proto.taxonomy.model.artifact.SingleTokenGrammar.deserializeBinaryFromReader);
      msg.addChildTokens(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChildrenEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.HybridTokenGrammar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.HybridTokenGrammar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.HybridTokenGrammar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.HybridTokenGrammar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.artifact.SingleTokenGrammar.serializeBinaryToWriter
    );
  }
  f = message.getChildrenStart();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChildTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.taxonomy.model.artifact.SingleTokenGrammar.serializeBinaryToWriter
    );
  }
  f = message.getChildrenEnd();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional SingleTokenGrammar parent = 1;
 * @return {?proto.taxonomy.model.artifact.SingleTokenGrammar}
 */
proto.taxonomy.model.artifact.HybridTokenGrammar.prototype.getParent = function() {
  return /** @type{?proto.taxonomy.model.artifact.SingleTokenGrammar} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.SingleTokenGrammar, 1));
};


/** @param {?proto.taxonomy.model.artifact.SingleTokenGrammar|undefined} value */
proto.taxonomy.model.artifact.HybridTokenGrammar.prototype.setParent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.artifact.HybridTokenGrammar.prototype.clearParent = function() {
  this.setParent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.HybridTokenGrammar.prototype.hasParent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string children_start = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.HybridTokenGrammar.prototype.getChildrenStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.HybridTokenGrammar.prototype.setChildrenStart = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated SingleTokenGrammar child_tokens = 3;
 * @return {!Array<!proto.taxonomy.model.artifact.SingleTokenGrammar>}
 */
proto.taxonomy.model.artifact.HybridTokenGrammar.prototype.getChildTokensList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.SingleTokenGrammar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.SingleTokenGrammar, 3));
};


/** @param {!Array<!proto.taxonomy.model.artifact.SingleTokenGrammar>} value */
proto.taxonomy.model.artifact.HybridTokenGrammar.prototype.setChildTokensList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.SingleTokenGrammar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.SingleTokenGrammar}
 */
proto.taxonomy.model.artifact.HybridTokenGrammar.prototype.addChildTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.taxonomy.model.artifact.SingleTokenGrammar, opt_index);
};


proto.taxonomy.model.artifact.HybridTokenGrammar.prototype.clearChildTokensList = function() {
  this.setChildTokensList([]);
};


/**
 * optional string children_end = 4;
 * @return {string}
 */
proto.taxonomy.model.artifact.HybridTokenGrammar.prototype.getChildrenEnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.HybridTokenGrammar.prototype.setChildrenEnd = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.displayName = 'proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.toObject = function(includeInstance, msg) {
  var f, obj = {
    parent: (f = msg.getParent()) && proto.taxonomy.model.artifact.SingleTokenGrammar.toObject(includeInstance, f),
    hybridChildrenStart: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hybridChildTokensList: jspb.Message.toObjectList(msg.getHybridChildTokensList(),
    proto.taxonomy.model.artifact.HybridTokenGrammar.toObject, includeInstance),
    hybridChildrenEnd: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar}
 */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar;
  return proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar}
 */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.artifact.SingleTokenGrammar;
      reader.readMessage(value,proto.taxonomy.model.artifact.SingleTokenGrammar.deserializeBinaryFromReader);
      msg.setParent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHybridChildrenStart(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.artifact.HybridTokenGrammar;
      reader.readMessage(value,proto.taxonomy.model.artifact.HybridTokenGrammar.deserializeBinaryFromReader);
      msg.addHybridChildTokens(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHybridChildrenEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.artifact.SingleTokenGrammar.serializeBinaryToWriter
    );
  }
  f = message.getHybridChildrenStart();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHybridChildTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.taxonomy.model.artifact.HybridTokenGrammar.serializeBinaryToWriter
    );
  }
  f = message.getHybridChildrenEnd();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional SingleTokenGrammar parent = 1;
 * @return {?proto.taxonomy.model.artifact.SingleTokenGrammar}
 */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.prototype.getParent = function() {
  return /** @type{?proto.taxonomy.model.artifact.SingleTokenGrammar} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.SingleTokenGrammar, 1));
};


/** @param {?proto.taxonomy.model.artifact.SingleTokenGrammar|undefined} value */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.prototype.setParent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.prototype.clearParent = function() {
  this.setParent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.prototype.hasParent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string hybrid_children_start = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.prototype.getHybridChildrenStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.prototype.setHybridChildrenStart = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated HybridTokenGrammar hybrid_child_tokens = 3;
 * @return {!Array<!proto.taxonomy.model.artifact.HybridTokenGrammar>}
 */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.prototype.getHybridChildTokensList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.HybridTokenGrammar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.HybridTokenGrammar, 3));
};


/** @param {!Array<!proto.taxonomy.model.artifact.HybridTokenGrammar>} value */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.prototype.setHybridChildTokensList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.HybridTokenGrammar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.HybridTokenGrammar}
 */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.prototype.addHybridChildTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.taxonomy.model.artifact.HybridTokenGrammar, opt_index);
};


proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.prototype.clearHybridChildTokensList = function() {
  this.setHybridChildTokensList([]);
};


/**
 * optional string hybrid_children_end = 4;
 * @return {string}
 */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.prototype.getHybridChildrenEnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.HybridTokenWithHybridChildrenGrammar.prototype.setHybridChildrenEnd = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.SingleTokenGrammar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.SingleTokenGrammar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.SingleTokenGrammar.displayName = 'proto.taxonomy.model.artifact.SingleTokenGrammar';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.SingleTokenGrammar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.SingleTokenGrammar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.SingleTokenGrammar.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupStart: jspb.Message.getFieldWithDefault(msg, 2, ""),
    baseTokenToolingSymbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    behaviors: (f = msg.getBehaviors()) && proto.taxonomy.model.artifact.BehaviorList.toObject(includeInstance, f),
    propertySets: (f = msg.getPropertySets()) && proto.taxonomy.model.artifact.PropertySetList.toObject(includeInstance, f),
    groupEnd: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.SingleTokenGrammar}
 */
proto.taxonomy.model.artifact.SingleTokenGrammar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.SingleTokenGrammar;
  return proto.taxonomy.model.artifact.SingleTokenGrammar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.SingleTokenGrammar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.SingleTokenGrammar}
 */
proto.taxonomy.model.artifact.SingleTokenGrammar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupStart(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseTokenToolingSymbol(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.artifact.BehaviorList;
      reader.readMessage(value,proto.taxonomy.model.artifact.BehaviorList.deserializeBinaryFromReader);
      msg.setBehaviors(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.artifact.PropertySetList;
      reader.readMessage(value,proto.taxonomy.model.artifact.PropertySetList.deserializeBinaryFromReader);
      msg.setPropertySets(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.SingleTokenGrammar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.SingleTokenGrammar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.SingleTokenGrammar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupStart();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBaseTokenToolingSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBehaviors();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.taxonomy.model.artifact.BehaviorList.serializeBinaryToWriter
    );
  }
  f = message.getPropertySets();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.taxonomy.model.artifact.PropertySetList.serializeBinaryToWriter
    );
  }
  f = message.getGroupEnd();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string group_start = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.getGroupStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.setGroupStart = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string base_token_tooling_symbol = 3;
 * @return {string}
 */
proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.getBaseTokenToolingSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.setBaseTokenToolingSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional BehaviorList behaviors = 4;
 * @return {?proto.taxonomy.model.artifact.BehaviorList}
 */
proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.getBehaviors = function() {
  return /** @type{?proto.taxonomy.model.artifact.BehaviorList} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.BehaviorList, 4));
};


/** @param {?proto.taxonomy.model.artifact.BehaviorList|undefined} value */
proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.setBehaviors = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.clearBehaviors = function() {
  this.setBehaviors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.hasBehaviors = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PropertySetList property_sets = 5;
 * @return {?proto.taxonomy.model.artifact.PropertySetList}
 */
proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.getPropertySets = function() {
  return /** @type{?proto.taxonomy.model.artifact.PropertySetList} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.PropertySetList, 5));
};


/** @param {?proto.taxonomy.model.artifact.PropertySetList|undefined} value */
proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.setPropertySets = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.clearPropertySets = function() {
  this.setPropertySets(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.hasPropertySets = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string group_end = 6;
 * @return {string}
 */
proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.getGroupEnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.SingleTokenGrammar.prototype.setGroupEnd = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.BehaviorList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.artifact.BehaviorList.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.artifact.BehaviorList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.BehaviorList.displayName = 'proto.taxonomy.model.artifact.BehaviorList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.artifact.BehaviorList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.BehaviorList.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.BehaviorList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.BehaviorList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.BehaviorList.toObject = function(includeInstance, msg) {
  var f, obj = {
    listStart: jspb.Message.getFieldWithDefault(msg, 1, ""),
    behaviorToolingSymbolsList: jspb.Message.getRepeatedField(msg, 2),
    listEnd: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.BehaviorList}
 */
proto.taxonomy.model.artifact.BehaviorList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.BehaviorList;
  return proto.taxonomy.model.artifact.BehaviorList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.BehaviorList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.BehaviorList}
 */
proto.taxonomy.model.artifact.BehaviorList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setListStart(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBehaviorToolingSymbols(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setListEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.BehaviorList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.BehaviorList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.BehaviorList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.BehaviorList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListStart();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBehaviorToolingSymbolsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getListEnd();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string list_start = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.BehaviorList.prototype.getListStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.BehaviorList.prototype.setListStart = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string behavior_tooling_symbols = 2;
 * @return {!Array<string>}
 */
proto.taxonomy.model.artifact.BehaviorList.prototype.getBehaviorToolingSymbolsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.taxonomy.model.artifact.BehaviorList.prototype.setBehaviorToolingSymbolsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.taxonomy.model.artifact.BehaviorList.prototype.addBehaviorToolingSymbols = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.taxonomy.model.artifact.BehaviorList.prototype.clearBehaviorToolingSymbolsList = function() {
  this.setBehaviorToolingSymbolsList([]);
};


/**
 * optional string list_end = 3;
 * @return {string}
 */
proto.taxonomy.model.artifact.BehaviorList.prototype.getListEnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.BehaviorList.prototype.setListEnd = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.PropertySetList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.artifact.PropertySetList.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.artifact.PropertySetList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.PropertySetList.displayName = 'proto.taxonomy.model.artifact.PropertySetList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.artifact.PropertySetList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.PropertySetList.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.PropertySetList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.PropertySetList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.PropertySetList.toObject = function(includeInstance, msg) {
  var f, obj = {
    listStart: jspb.Message.getFieldWithDefault(msg, 1, ""),
    propertySetsList: jspb.Message.toObjectList(msg.getPropertySetsList(),
    proto.taxonomy.model.artifact.PropertySetListItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.PropertySetList}
 */
proto.taxonomy.model.artifact.PropertySetList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.PropertySetList;
  return proto.taxonomy.model.artifact.PropertySetList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.PropertySetList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.PropertySetList}
 */
proto.taxonomy.model.artifact.PropertySetList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setListStart(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.artifact.PropertySetListItem;
      reader.readMessage(value,proto.taxonomy.model.artifact.PropertySetListItem.deserializeBinaryFromReader);
      msg.addPropertySets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.PropertySetList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.PropertySetList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.PropertySetList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.PropertySetList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListStart();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPropertySetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.taxonomy.model.artifact.PropertySetListItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional string list_start = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.PropertySetList.prototype.getListStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.PropertySetList.prototype.setListStart = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated PropertySetListItem property_sets = 2;
 * @return {!Array<!proto.taxonomy.model.artifact.PropertySetListItem>}
 */
proto.taxonomy.model.artifact.PropertySetList.prototype.getPropertySetsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.PropertySetListItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.PropertySetListItem, 2));
};


/** @param {!Array<!proto.taxonomy.model.artifact.PropertySetListItem>} value */
proto.taxonomy.model.artifact.PropertySetList.prototype.setPropertySetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.PropertySetListItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.PropertySetListItem}
 */
proto.taxonomy.model.artifact.PropertySetList.prototype.addPropertySets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.taxonomy.model.artifact.PropertySetListItem, opt_index);
};


proto.taxonomy.model.artifact.PropertySetList.prototype.clearPropertySetsList = function() {
  this.setPropertySetsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.PropertySetListItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.PropertySetListItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.taxonomy.model.artifact.PropertySetListItem.displayName = 'proto.taxonomy.model.artifact.PropertySetListItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.PropertySetListItem.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.PropertySetListItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.PropertySetListItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.PropertySetListItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    propertySetSymbol: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.PropertySetListItem}
 */
proto.taxonomy.model.artifact.PropertySetListItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.PropertySetListItem;
  return proto.taxonomy.model.artifact.PropertySetListItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.PropertySetListItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.PropertySetListItem}
 */
proto.taxonomy.model.artifact.PropertySetListItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertySetSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.PropertySetListItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.PropertySetListItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.PropertySetListItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.PropertySetListItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropertySetSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string property_set_symbol = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.PropertySetListItem.prototype.getPropertySetSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.PropertySetListItem.prototype.setPropertySetSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.taxonomy.model.artifact.TemplateType = {
  SINGLE_TOKEN: 0,
  HYBRID: 1
};

/**
 * @enum {number}
 */
proto.taxonomy.model.artifact.TokenType = {
  FUNGIBLE: 0,
  NON_FUNGIBLE: 1
};

/**
 * @enum {number}
 */
proto.taxonomy.model.artifact.RepresentationType = {
  COMMON: 0,
  UNIQUE: 1
};

/**
 * @enum {number}
 */
proto.taxonomy.model.artifact.ValueType = {
  INTRINSIC: 0,
  REFERENCE: 1
};

/**
 * @enum {number}
 */
proto.taxonomy.model.artifact.TokenUnit = {
  FRACTIONAL: 0,
  WHOLE: 1,
  SINGLETON: 2
};

/**
 * @enum {number}
 */
proto.taxonomy.model.artifact.Supply = {
  FIXED: 0,
  CAPPED_VARIABLE: 1,
  GATED: 2,
  INFINITE: 3
};

/**
 * @enum {number}
 */
proto.taxonomy.model.artifact.ArtifactType = {
  BASE: 0,
  BEHAVIOR: 1,
  BEHAVIOR_GROUP: 2,
  PROPERTY_SET: 3,
  TEMPLATE_FORMULA: 4,
  TEMPLATE_DEFINITION: 5,
  TOKEN_TEMPLATE: 6
};

/**
 * @enum {number}
 */
proto.taxonomy.model.artifact.ArtifactContent = {
  DEFINITION: 0,
  CONTROL: 1,
  UML: 2,
  OTHER: 3
};

/**
 * @enum {number}
 */
proto.taxonomy.model.artifact.MappingType = {
  SOURCE_CODE: 0,
  IMPLEMENTATION: 1,
  RESOURCE: 2
};

/**
 * @enum {number}
 */
proto.taxonomy.model.artifact.TargetPlatform = {
  ETHEREUM_SOLIDITY: 0,
  CHAINCODE_GO: 1,
  CHAINCODE_JAVA: 2,
  CHAINCODE_NODE: 3,
  CORDA: 4,
  DAML: 5,
  OTHER_PLATFORM: 6
};

goog.object.extend(exports, proto.taxonomy.model.artifact);
